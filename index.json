{"repository_name":"cmark","body":"# cr-cmark-gfm\n\n[![Crystal CI](https://github.com/amauryt/cr-cmark-gfm/actions/workflows/crystal.yml/badge.svg)](https://github.com/amauryt/cr-cmark-gfm/actions/workflows/crystal.yml)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://amauryt.github.io/cr-cmark-gfm/)\n\nCrystal C bindings for cmark-gfm, with support for Github Flavored Markdown (**v0.29.0.gfm.8**). For more information regarding the available options and extensions see the official [GFM spec documentation](https://github.github.com/gfm/).\n\n\nFeatures:\n\n  - Simple parsing and rendering of markdown content\n  - Render any node of the markdown AST in the following formats:\n    - HTML\n    - XML\n    - Plaintext\n    - Commonmark (including GFM-only nodes)\n    - Groff man pages\n    - LaTeX\n  - Create custom renderers or customize the included crystal HTML renderer, which outputs the same HTML as the library's C renderer\n  - Getters and setters for almost all of the properties of AST nodes\n  - Tree traversal and manipulation\n  - Directly create and customize nodes\n\n## Installation\n\nAdd the dependency to your `shard.yml` and then run `shards install`:\n\n```yaml\ndependencies:\n  cmark:\n    github: amauryt/cr-cmark-gfm\n    version: ~> 0.1.3\n```\n\nThis will automatically clone the cmark-gfm repository and compile both `libcmark-gfm` and `libcmark-gfm-extensions`, which can then be statically linked.\n\n## Usage\n\nThe `Cmark` module offers high-level parsing and rendering of markdown content, be it Commonmark-only, full GFM, or partially GFM.\n\nIf the content is Commonmark-only use the respective _commonmark_  parsing and HTML rendering methods for the best performance. If all of the GFM extensions must be enabled use the _gfm_ methods. For partial support of GFM extensions use the more generic _document_ methods.\n\n```crystal\nrequire \"cmark\"\n\noptions = Option.flags(Nobreaks, ValidateUTF8) # deafult is Option::None\nextensions = Extension.flags(Table, Tasklist)  # default is Extension::None\n\ncommonmark_only = File.read(\"commonmark_only.md\")\nfull_gfm = File.read(\"full_gfm.md\")\npartially_gfm = File.read(\"partially_gfm.md\")\n\n# Direct parsing and rendering\n\ncommonmark_only_html  = Cmark.commonmark_to_html(commonmark_only, options)\nfull_gfm_html         = Cmark.gfm_to_html(full_gfm, options)\npartially_gfm_html    = Cmark.document_to_html(partially_gfm, options, extensions)\n\n# Parse to obtain a document node for further processing\n\ncommonmark_only_node  = Cmark.parse_commonmark(commonmark_only, options)\nfull_gfm_node         = Cmark.parse_gfm(full_gfm, options)\npartially_gfm_node    = Cmark.parse_document(partially_gfm, options, extensions)\n```\n\n### Node creation and rendering\n\n```crystal\nrequire \"cmark\"\ninclude Cmark\n\ncontents = NodeMaker.strong\ncontents.append_child NodeMaker.text(\"click here\")\nnode = NodeMaker.link(url: \"http://example.com\", title: \"Example\")\nnode.append_child(contents)\n\nnode.type.link? # => true\nnode.url # => http://example.com\nnode.title # => \"Example\"\nnode.title = \"My Example\"\n\nnode.render_commonmark # => [**click here**](http://example.com \"My Example\")\nnode.render_plaintext # => click here\n```\n\n### Tree traversal and manipulation\n\n```crystal\n# Using the node from the previous example\n\nnode.previous # => nil\nnode.first_child # => <Cmark::Node::Strong>\nlast_child =  node.last_child.not_nil!\nlast_child == node.first_child # => true\nlast_child.next # => <Cmark::Node::Text>\n\niterator = EventIterator.new(node)\n\niterator.each do |event|\n  node = event.node\n  if event.enter?\n    puts \"entering node\"\n  end\n  if event.modifiable? && node.type.strong?\n    # Transform strong text into unformatted text\n    text_node = node.first_child.not_nil!\n    node.parent.not_nil!.prepend_child(text_node)\n    node.unlink\n  end\nend\n\nnode.render_commonmark # => [click here](http://example.com \"My Example\")\n```\n\n### Custom rendering\n```crystal\nclass MyHTMLRenderer < Cmark::HTMLRenderer\n  # Container nodes receive `node` and `entering`\n  def strong(node, entering)\n    if entering\n      out \"<b>\"\n    else\n      out \"</b>\"\n    end\n  end\n\n  # Leaf nodes only receive `node`\n  def text(node)\n    out node.literal.gsub(\"click\", \"don't click\")\n  end\nend\n\n# Using the node from the \"Node creation and rendering\" example\n\noptions = Option.flags(Nobreaks, ValidateUTF8) # default is Option::None\nextensions = Extension.flags(Table, Tasklist) # default is Extension::None\n\nrenderer = MyHTMLRenderer.new(options, extensions)\nhtml = renderer.render(node)\nhtml # => <a href=\"http://example.com\" title=\"My Example\"><b>don't click here</b></a>\n```\n\n## Alternatives\n\nOther alternatives (from which this shard took inspiration) are:\n\n* [markd](https://github.com/icyleaf/markd): A pure Crystal port of [commonmark.js](https://github.com/jgm/commonmark.js). Compliant to Commonmark v0.29, but it has no GFM support.\n* [crystal-cmark](https://github.com/ysbaddaden/crystal-cmark): Minimal parsing and rendering C bindings with [cmark](https://github.com/commonmark/cmark) v0.30.2 but without GFM support.\n* [crystal-cmark-gfm](https://github.com/mamantoha/crystal-cmark-gfm): Minimal C bindings for parsing and rendering with the latest commit of [cmark-gfm](https://github.com/github/cmark-gfm) (v0.29.0.gfm.x)\n\n## Contributing\n\n1. Fork it (<https://github.com/amauryt/cr-cmark-gfm/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Amaury Trujillo](https://github.com/amauryt) - creator and maintainer\n- [Anton Maminov](https://github.com/mamantoha) - contributor","program":{"html_id":"cmark/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"cmark","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"cmark/Cmark","path":"Cmark.html","kind":"module","full_name":"Cmark","name":"Cmark","abstract":false,"locations":[{"filename":"src/cmark.cr","line_number":11,"url":null},{"filename":"src/cmark/alignment.cr","line_number":1,"url":null},{"filename":"src/cmark/delim_type.cr","line_number":3,"url":null},{"filename":"src/cmark/error.cr","line_number":1,"url":null},{"filename":"src/cmark/event.cr","line_number":1,"url":null},{"filename":"src/cmark/event_iterator.cr","line_number":3,"url":null},{"filename":"src/cmark/extension.cr","line_number":1,"url":null},{"filename":"src/cmark/fencing_details.cr","line_number":1,"url":null},{"filename":"src/cmark/lib_cmark.cr","line_number":1,"url":null},{"filename":"src/cmark/list_type.cr","line_number":3,"url":null},{"filename":"src/cmark/node.cr","line_number":4,"url":null},{"filename":"src/cmark/node_maker.cr","line_number":3,"url":null},{"filename":"src/cmark/node_type.cr","line_number":3,"url":null},{"filename":"src/cmark/option.cr","line_number":3,"url":null},{"filename":"src/cmark/renderer.cr","line_number":1,"url":null},{"filename":"src/cmark/renderers/html_renderer.cr","line_number":3,"url":null},{"filename":"src/cmark/version.cr","line_number":1,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.3\""}],"doc":"This module offers high-level parsing and rendering of markdown content, be it Commonmark-only, full GFM, or partially GFM.\n\nIf the content is Commonmark-only use the respective _commonmark_  parsing and\nHTML rendering methods for the best performance.\nIf all of the GFM extensions must be enabled use the _gfm_ methods.\nFor partial support of GFM extensions use the more generic _document_ methods.","summary":"<p>This module offers high-level parsing and rendering of markdown content, be it Commonmark-only, full GFM, or partially GFM.</p>","class_methods":[{"html_id":"commonmark_to_html(text:String,options=Option::None):String-class-method","name":"commonmark_to_html","doc":"Renders a Commonmark-only text as HTML.","summary":"<p>Renders a Commonmark-only text as HTML.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"args_string":"(text : String, options = Option::None) : String","args_html":"(text : String, options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>) : String","location":{"filename":"src/cmark.cr","line_number":13,"url":null},"def":{"name":"commonmark_to_html","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"return_type":"String","visibility":"Public","body":"len = text.bytesize\nresult = LibCmark.cmark_markdown_to_html(text, len, options)\nString.new(result)\n"}},{"html_id":"document_to_html(text:String,options=Option::None,extensions=Extension::None):String-class-method","name":"document_to_html","doc":"Renders commonmark text as HTML.","summary":"<p>Renders commonmark text as HTML.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":""}],"args_string":"(text : String, options = Option::None, extensions = Extension::None) : String","args_html":"(text : String, options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, extensions = <span class=\"t\">Extension</span><span class=\"t\">::</span><span class=\"t\">None</span>) : String","location":{"filename":"src/cmark.cr","line_number":25,"url":null},"def":{"name":"document_to_html","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":""}],"return_type":"String","visibility":"Public","body":"allocator = LibCmark.cmark_get_default_mem_allocator\ndocument = self.parse_document_with_allocator(text, options, extensions, allocator)\nhtml = document.render_html(options, extensions)\nhtml\n"}},{"html_id":"gfm_to_html(text:String,options=Option::None):String-class-method","name":"gfm_to_html","doc":"Renders commonmark text with all of the GFM extensions enabled as HTML.","summary":"<p>Renders commonmark text with all of the GFM extensions enabled as HTML.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"args_string":"(text : String, options = Option::None) : String","args_html":"(text : String, options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>) : String","location":{"filename":"src/cmark.cr","line_number":20,"url":null},"def":{"name":"gfm_to_html","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"return_type":"String","visibility":"Public","body":"self.document_to_html(text, options, Extension::All)"}},{"html_id":"parse_commonmark(text:String,options=Option::None):Node-class-method","name":"parse_commonmark","doc":"Parses a Commonmark-only document text.","summary":"<p>Parses a Commonmark-only document text.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"args_string":"(text : String, options = Option::None) : Node","args_html":"(text : String, options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>) : <a href=\"Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark.cr","line_number":33,"url":null},"def":{"name":"parse_commonmark","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"return_type":"Node","visibility":"Public","body":"len = text.bytesize\nnode_p = LibCmark.cmark_parse_document(text, len, options)\nNode.new(node_p)\n"}},{"html_id":"parse_document(text:String,options=Option::None,extensions=Extension::None):Node-class-method","name":"parse_document","doc":"Parses a commonmark document text.","summary":"<p>Parses a commonmark document text.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":""}],"args_string":"(text : String, options = Option::None, extensions = Extension::None) : Node","args_html":"(text : String, options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, extensions = <span class=\"t\">Extension</span><span class=\"t\">::</span><span class=\"t\">None</span>) : <a href=\"Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark.cr","line_number":40,"url":null},"def":{"name":"parse_document","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":""}],"return_type":"Node","visibility":"Public","body":"allocator = LibCmark.cmark_get_default_mem_allocator\nself.parse_document_with_allocator(text, options, extensions, allocator)\n"}},{"html_id":"parse_gfm(text:String,options=Option::None):Node-class-method","name":"parse_gfm","doc":"Parses a commonmark document text with all of the GFM extensions enabled.","summary":"<p>Parses a commonmark document text with all of the GFM extensions enabled.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"args_string":"(text : String, options = Option::None) : Node","args_html":"(text : String, options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>) : <a href=\"Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark.cr","line_number":46,"url":null},"def":{"name":"parse_gfm","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"return_type":"Node","visibility":"Public","body":"self.parse_document(text, options, Extension::All)"}}],"types":[{"html_id":"cmark/Cmark/Alignment","path":"Cmark/Alignment.html","kind":"enum","full_name":"Cmark::Alignment","name":"Alignment","abstract":false,"ancestors":[{"html_id":"cmark/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cmark/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/alignment.cr","line_number":3,"url":null}],"repository_name":"cmark","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0_u8","doc":"C library value '\\0'","summary":"<p>C library value '\\0'</p>"},{"id":"Left","name":"Left","value":"108_u8","doc":"C library value 'l'","summary":"<p>C library value 'l'</p>"},{"id":"Center","name":"Center","value":"99_u8","doc":"C library value 'c'","summary":"<p>C library value 'c'</p>"},{"id":"Right","name":"Right","value":"114_u8","doc":"C library value 'r'","summary":"<p>C library value 'r'</p>"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A text alignment value for columns of nodes with `NodeType::Table`.","summary":"<p>A text alignment value for columns of nodes with <code><a href=\"../Cmark/NodeType.html#Table\">NodeType::Table</a></code>.</p>","instance_methods":[{"html_id":"center?-instance-method","name":"center?","abstract":false,"location":{"filename":"src/cmark/alignment.cr","line_number":9,"url":null},"def":{"name":"center?","visibility":"Public","body":"self == Center"}},{"html_id":"left?-instance-method","name":"left?","abstract":false,"location":{"filename":"src/cmark/alignment.cr","line_number":7,"url":null},"def":{"name":"left?","visibility":"Public","body":"self == Left"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/cmark/alignment.cr","line_number":5,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"right?-instance-method","name":"right?","abstract":false,"location":{"filename":"src/cmark/alignment.cr","line_number":11,"url":null},"def":{"name":"right?","visibility":"Public","body":"self == Right"}}]},{"html_id":"cmark/Cmark/DelimType","path":"Cmark/DelimType.html","kind":"enum","full_name":"Cmark::DelimType","name":"DelimType","abstract":false,"ancestors":[{"html_id":"cmark/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cmark/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/delim_type.cr","line_number":5,"url":null}],"repository_name":"cmark","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0","doc":"No specific delimiter (i.e., node is not an ordered list)","summary":"<p>No specific delimiter (i.e., node is not an ordered list)</p>"},{"id":"Period","name":"Period","value":"1","doc":"Period delimiter, such as `7.`","summary":"<p>Period delimiter, such as <code>7.</code></p>"},{"id":"Paren","name":"Paren","value":"2","doc":"Parenthesis delimiter, such as `7)`","summary":"<p>Parenthesis delimiter, such as <code>7)</code></p>"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A delimiter type for lists with `ListType::Ordered`.","summary":"<p>A delimiter type for lists with <code><a href=\"../Cmark/ListType.html#Ordered\">ListType::Ordered</a></code>.</p>","instance_methods":[{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/cmark/delim_type.cr","line_number":7,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"paren?-instance-method","name":"paren?","abstract":false,"location":{"filename":"src/cmark/delim_type.cr","line_number":11,"url":null},"def":{"name":"paren?","visibility":"Public","body":"self == Paren"}},{"html_id":"period?-instance-method","name":"period?","abstract":false,"location":{"filename":"src/cmark/delim_type.cr","line_number":9,"url":null},"def":{"name":"period?","visibility":"Public","body":"self == Period"}}]},{"html_id":"cmark/Cmark/Error","path":"Cmark/Error.html","kind":"class","full_name":"Cmark::Error","name":"Error","abstract":false,"superclass":{"html_id":"cmark/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cmark/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/error.cr","line_number":3,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"cmark/Cmark/NodeSetterError","kind":"class","full_name":"Cmark::NodeSetterError","name":"NodeSetterError"},{"html_id":"cmark/Cmark/TreeManipulationError","kind":"class","full_name":"Cmark::TreeManipulationError","name":"TreeManipulationError"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A generic error class for exceptions not handled by known subclasses.","summary":"<p>A generic error class for exceptions not handled by known subclasses.</p>"},{"html_id":"cmark/Cmark/Event","path":"Cmark/Event.html","kind":"struct","full_name":"Cmark::Event","name":"Event","abstract":false,"superclass":{"html_id":"cmark/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cmark/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/event.cr","line_number":5,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"An inmutable record that represents an event returned by `EventIterator`.\n\nNOTE: An event with a leaf node always returns true for `#enter?`. See `NodeType` for more information on leaf nodes.","summary":"<p>An inmutable record that represents an event returned by <code><a href=\"../Cmark/EventIterator.html\">EventIterator</a></code>.</p>","instance_methods":[{"html_id":"enter?:Bool-instance-method","name":"enter?","doc":"Indicates the entering of node.","summary":"<p>Indicates the entering of node.</p>","abstract":false,"location":{"filename":"src/cmark/event.cr","line_number":18,"url":null},"def":{"name":"enter?","visibility":"Public","body":"@enter"}},{"html_id":"exit?-instance-method","name":"exit?","doc":"Indicates the exiting of node.","summary":"<p>Indicates the exiting of node.</p>","abstract":false,"location":{"filename":"src/cmark/event.cr","line_number":23,"url":null},"def":{"name":"exit?","visibility":"Public","body":"!@enter"}},{"html_id":"modifiable?-instance-method","name":"modifiable?","doc":"Indicates if node can be modified.","summary":"<p>Indicates if node can be modified.</p>","abstract":false,"location":{"filename":"src/cmark/event.cr","line_number":13,"url":null},"def":{"name":"modifiable?","visibility":"Public","body":"(exit? && node.type.container?) || node.type.leaf?"}},{"html_id":"node:Cmark::Node-instance-method","name":"node","doc":"The current event node.","summary":"<p>The current event node.</p>","abstract":false,"location":{"filename":"src/cmark/event.cr","line_number":7,"url":null},"def":{"name":"node","visibility":"Public","body":"@node"}}]},{"html_id":"cmark/Cmark/EventIterator","path":"Cmark/EventIterator.html","kind":"class","full_name":"Cmark::EventIterator","name":"EventIterator","abstract":false,"superclass":{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cmark/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"cmark/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/event_iterator.cr","line_number":20,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cmark/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"An iterator that walks through a tree of nodes, starting from a root node, returning an `Event` with one node at a time,\ntogether with information about whether the node is being entered or exited, and if it is modifiable.\n\nThe iterator will first descend to a child node (returning an ENTER `Event`),\nif there is one.\nWhen there is no child, the iterator will go to the next sibling.\nWhen there is no next sibling, the iterator will return to the parent (but returning an EXIT `Event`).\nThe iterator will stop after it reaches the root node again on exit.\n\nOne natural application is an HTML renderer, where an ENTER event outputs an open tag and an EXIT\nevent outputs a close tag.\nAn iterator might also be used to transform an AST in some systematic way, for example, turning all\nlevel-3 headings into regular paragraphs.\n\nNOTE: Nodes can be modified only after an EXIT event or an ENTER event for leaf nodes. The convenience\nmethod `Event#modifiable?` checks that these conditions are met.","summary":"<p>An iterator that walks through a tree of nodes, starting from a root node, returning an <code><a href=\"../Cmark/Event.html\">Event</a></code> with one node at a time, together with information about whether the node is being entered or exited, and if it is modifiable.</p>","constructors":[{"html_id":"new(root:Node)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"Node"}],"args_string":"(root : Node)","args_html":"(root : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/event_iterator.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"Node"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"modifiable_node_iterator:Iterator(Node)-instance-method","name":"modifiable_node_iterator","doc":"Returns an iterator with all the nodes in the order in which can be modified.","summary":"<p>Returns an iterator with all the nodes in the order in which can be modified.</p>","abstract":false,"location":{"filename":"src/cmark/event_iterator.cr","line_number":54,"url":null},"def":{"name":"modifiable_node_iterator","return_type":"Iterator(Node)","visibility":"Public","body":"(self.select(&.modifiable?)).map(&.node)"}},{"html_id":"next-instance-method","name":"next","doc":"Returns the next node event in this iterator, or `Iterator::Stop::INSTANCE` if there are no more events.","summary":"<p>Returns the next node event in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more events.</p>","abstract":false,"location":{"filename":"src/cmark/event_iterator.cr","line_number":35,"url":null},"def":{"name":"next","visibility":"Public","body":"type = LibCmark.cmark_iter_get_event_type(@iter_p)\nif type.cmark_event_done? || type.cmark_event_none?\n  stop\nelse\n  node = Node.new(LibCmark.cmark_iter_get_node(@iter_p))\n  LibCmark.cmark_iter_next(@iter_p)\n  Event.new(type.cmark_event_enter?, node)\nend\n"}},{"html_id":"rewind-instance-method","name":"rewind","doc":"Rewinds the iterator to its original state.","summary":"<p>Rewinds the iterator to its original state.</p>","abstract":false,"location":{"filename":"src/cmark/event_iterator.cr","line_number":47,"url":null},"def":{"name":"rewind","visibility":"Public","body":"root_p = LibCmark.cmark_iter_get_root(@iter_p)\nLibCmark.cmark_iter_reset(@iter_p, root_p, @initial_lib_event_type)\nself\n"}}]},{"html_id":"cmark/Cmark/Extension","path":"Cmark/Extension.html","kind":"enum","full_name":"Cmark::Extension","name":"Extension","abstract":false,"ancestors":[{"html_id":"cmark/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cmark/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/extension.cr","line_number":9,"url":null}],"repository_name":"cmark","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Table","name":"Table","value":"1"},{"id":"Strikethrough","name":"Strikethrough","value":"2"},{"id":"Autolink","name":"Autolink","value":"4"},{"id":"Tagfilter","name":"Tagfilter","value":"8"},{"id":"Tasklist","name":"Tasklist","value":"16"},{"id":"None","name":"None","value":"0"},{"id":"All","name":"All","value":"31"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A flag enum to enable GFM extensions for node parsing and rendering.\n\nYou can easily combine options like this:\n```\nextensions = Extension.flags(Table, Autolink)\n```","summary":"<p>A flag enum to enable GFM extensions for node parsing and rendering.</p>","instance_methods":[{"html_id":"autolink?-instance-method","name":"autolink?","abstract":false,"location":{"filename":"src/cmark/extension.cr","line_number":12,"url":null},"def":{"name":"autolink?","visibility":"Public","body":"self.includes?(Autolink)"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/cmark/extension.cr","line_number":9,"url":null},"def":{"name":"none?","visibility":"Public","body":"value == 0"}},{"html_id":"strikethrough?-instance-method","name":"strikethrough?","abstract":false,"location":{"filename":"src/cmark/extension.cr","line_number":11,"url":null},"def":{"name":"strikethrough?","visibility":"Public","body":"self.includes?(Strikethrough)"}},{"html_id":"table?-instance-method","name":"table?","abstract":false,"location":{"filename":"src/cmark/extension.cr","line_number":10,"url":null},"def":{"name":"table?","visibility":"Public","body":"self.includes?(Table)"}},{"html_id":"tagfilter?-instance-method","name":"tagfilter?","abstract":false,"location":{"filename":"src/cmark/extension.cr","line_number":13,"url":null},"def":{"name":"tagfilter?","visibility":"Public","body":"self.includes?(Tagfilter)"}},{"html_id":"tasklist?-instance-method","name":"tasklist?","abstract":false,"location":{"filename":"src/cmark/extension.cr","line_number":14,"url":null},"def":{"name":"tasklist?","visibility":"Public","body":"self.includes?(Tasklist)"}}]},{"html_id":"cmark/Cmark/FencingDetails","path":"Cmark/FencingDetails.html","kind":"struct","full_name":"Cmark::FencingDetails","name":"FencingDetails","abstract":false,"superclass":{"html_id":"cmark/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cmark/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/fencing_details.cr","line_number":3,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"An inmutable record that represents fencing details of a node with `NodeType::CodeBlock`.","summary":"<p>An inmutable record that represents fencing details of a node with <code><a href=\"../Cmark/NodeType.html#CodeBlock\">NodeType::CodeBlock</a></code>.</p>","constructors":[{"html_id":"new(length:Int32,offset:Int32,backtick=true)-class-method","name":"new","abstract":false,"args":[{"name":"length","external_name":"length","restriction":"::Int32"},{"name":"offset","external_name":"offset","restriction":"::Int32"},{"name":"backtick","default_value":"true","external_name":"backtick","restriction":""}],"args_string":"(length : Int32, offset : Int32, backtick = true)","args_html":"(length : Int32, offset : Int32, backtick = <span class=\"n\">true</span>)","location":{"filename":"src/cmark/fencing_details.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"length","external_name":"length","restriction":"::Int32"},{"name":"offset","external_name":"offset","restriction":"::Int32"},{"name":"backtick","default_value":"true","external_name":"backtick","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(length, offset, backtick)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"backtick?-instance-method","name":"backtick?","doc":"Returns true if the fencing character is a backtick [~]","summary":"<p>Returns true if the fencing character is a backtick [~]</p>","abstract":false,"location":{"filename":"src/cmark/fencing_details.cr","line_number":18,"url":null},"def":{"name":"backtick?","visibility":"Public","body":"@character == '`'"}},{"html_id":"character:Char-instance-method","name":"character","abstract":false,"location":{"filename":"src/cmark/fencing_details.cr","line_number":6,"url":null},"def":{"name":"character","return_type":"Char","visibility":"Public","body":"@character"}},{"html_id":"length:Int32-instance-method","name":"length","abstract":false,"location":{"filename":"src/cmark/fencing_details.cr","line_number":4,"url":null},"def":{"name":"length","return_type":"Int32","visibility":"Public","body":"@length"}},{"html_id":"offset:Int32-instance-method","name":"offset","abstract":false,"location":{"filename":"src/cmark/fencing_details.cr","line_number":5,"url":null},"def":{"name":"offset","return_type":"Int32","visibility":"Public","body":"@offset"}},{"html_id":"tilde?-instance-method","name":"tilde?","doc":"Returns true if the fencing character is a tilde [`]","summary":"<p>Returns true if the fencing character is a tilde [`]</p>","abstract":false,"location":{"filename":"src/cmark/fencing_details.cr","line_number":13,"url":null},"def":{"name":"tilde?","visibility":"Public","body":"@character == '~'"}}]},{"html_id":"cmark/Cmark/HTMLRenderer","path":"Cmark/HTMLRenderer.html","kind":"class","full_name":"Cmark::HTMLRenderer","name":"HTMLRenderer","abstract":false,"superclass":{"html_id":"cmark/Cmark/Renderer","kind":"class","full_name":"Cmark::Renderer","name":"Renderer"},"ancestors":[{"html_id":"cmark/Cmark/Renderer","kind":"class","full_name":"Cmark::Renderer","name":"Renderer"},{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/renderers/html_renderer.cr","line_number":4,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"instance_methods":[{"html_id":"block_quote(node,entering)-instance-method","name":"block_quote","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":44,"url":null},"def":{"name":"block_quote","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  out(\"<blockquote\")\n  sourcepos(node)\n  out(\">\\n\")\nelse\n  cr\n  out(\"</blockquote>\\n\")\nend"}},{"html_id":"code(node)-instance-method","name":"code","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":202,"url":null},"def":{"name":"code","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"out(\"<code>\")\nout(escape_html(node.literal))\nout(\"</code>\")\n"}},{"html_id":"code_block(node)-instance-method","name":"code_block","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":84,"url":null},"def":{"name":"code_block","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"cr\nout(\"<pre\")\nsourcepos(node)\nfence_info = node.fence_info\nif fence_info.bytesize.zero?\n  out(\"><code>\")\nelse\n  tags = fence_info.split(' ', remove_empty: true)\n  if @options.github_pre_lang?\n    out(\" lang=\\\"#{escape_html(tags.shift)}\")\n    if @options.full_info_string?\n      tags.each do |tag|\n        out(\"\\\" data-meta=\\\"#{escape_html(tag)}\")\n      end\n    end\n    out(\"\\\"><code>\")\n  else\n    out(\"><code class=\\\"language-#{escape_html(tags.shift)}\")\n    if @options.full_info_string?\n      tags.each do |tag|\n        out(\"\\\" data-meta=\\\"#{escape_html(tag)}\")\n      end\n    end\n    out(\"\\\">\")\n  end\nend\nout(escape_html(node.literal))\nout(\"</code></pre>\\n\")\n"}},{"html_id":"custom_block(node,entering)-instance-method","name":"custom_block","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":120,"url":null},"def":{"name":"custom_block","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"cr\nif entering\n  out(node.on_enter)\nelse\n  out(node.on_exit)\nend\ncr\n"}},{"html_id":"custom_inline(node,entering)-instance-method","name":"custom_inline","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":218,"url":null},"def":{"name":"custom_inline","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  out(node.on_enter)\nelse\n  out(node.on_exit)\nend"}},{"html_id":"document(node,entering)-instance-method","name":"document","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":38,"url":null},"def":{"name":"document","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if !entering && @written_footnote_index > 0\n  out(\"</ol>\\n</section>\\n\")\nend"}},{"html_id":"emph(node,entering)-instance-method","name":"emph","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":226,"url":null},"def":{"name":"emph","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  out(\"<em>\")\nelse\n  out(\"</em>\")\nend"}},{"html_id":"footnote_definition(node,entering)-instance-method","name":"footnote_definition","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":169,"url":null},"def":{"name":"footnote_definition","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  if @footnote_index.zero?\n    out(\"<section class=\\\"footnotes\\\" data-footnotes>\\n<ol>\\n\")\n  end\n  @footnote_index = @footnote_index + 1\n  def_literal = escape_html(node.footnote_definition_literal)\n  out(\"<li id=\\\"fn-#{def_literal}\\\">\\n\")\nelse\n  if print_footnote_backref(node)\n    out(\"\\n\")\n  end\n  out(\"</li>\\n\")\nend"}},{"html_id":"footnote_inline(node,entering)-instance-method","name":"footnote_inline","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":271,"url":null},"def":{"name":"footnote_inline","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  parent_def_literal = escape_html(node.footnote_parent_definition_literal)\n  out(\"<sup class=\\\"footnote-ref\\\"><a href=\\\"#fn-#{parent_def_literal}\\\" id=\\\"fnref-#{parent_def_literal}\")\n  if node.footnote_reference_index > 1\n    out(\"-#{node.footnote_reference_index}\")\n  end\n  out(\"\\\" data-footnote-ref>\")\n  out(node.literal)\n  out(\"</a></sup>\")\nend"}},{"html_id":"heading(node,entering)-instance-method","name":"heading","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":150,"url":null},"def":{"name":"heading","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  cr\n  out(\"<h#{node.heading_level}\")\n  sourcepos(node)\n  out(\">\")\nelse\n  out(\"</h#{node.heading_level}\")\n  out(\">\\n\")\nend"}},{"html_id":"html_block(node)-instance-method","name":"html_block","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":108,"url":null},"def":{"name":"html_block","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"cr\nif !@options.unsafe?\n  out(\"<!-- raw HTML omitted -->\")\nelse\n  if @extensions.tagfilter?\n    out(filter_tags(node.literal))\n  else\n    out(node.literal)\n  end\nend\ncr\n"}},{"html_id":"html_inline(node)-instance-method","name":"html_inline","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":208,"url":null},"def":{"name":"html_inline","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"if !@options.unsafe?\n  out(\"<!-- raw HTML omitted -->\")\nelse\n  if @extensions.tagfilter?\n    out(filter_tags(node.literal))\n  else\n    out(node.literal)\n  end\nend"}},{"html_id":"image(node,entering)-instance-method","name":"image","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":258,"url":null},"def":{"name":"image","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  url = node.url\n  out(\"<img src=\\\"\")\n  conditional_out_url_encoding\n  out(\"\\\" alt=\\\"\")\nelse\n  title = node.title\n  if title.empty?\n  else\n    out(\"\\\" title=\\\"#{title}\")\n  end\n  out(\"\\\" />\")\nend"}},{"html_id":"item(node,entering)-instance-method","name":"item","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":71,"url":null},"def":{"name":"item","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if (entering)\n  cr\n  out(\"<li\")\n  sourcepos(node)\n  out(\">\")\n  if node.tasklist_item?\n    tasklist_item_inner(node, entering)\n  end\nelse\n  if node.tasklist_item?\n    tasklist_item_inner(node, entering)\n  end\n  out(\"</li>\\n\")\nend"}},{"html_id":"linebreak(node)-instance-method","name":"linebreak","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":198,"url":null},"def":{"name":"linebreak","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"out(\"<br />\\n\")"}},{"html_id":"link(node,entering)-instance-method","name":"link","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":242,"url":null},"def":{"name":"link","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  url = node.url\n  title = node.title\n  out(\"<a href=\\\"\")\n  conditional_out_url_encoding\n  if title.try(&.empty?)\n  else\n    out(\"\\\" title=\\\"\")\n    out(escape_html(title))\n  end\n  out(\"\\\">\")\nelse\n  out(\"</a>\")\nend"}},{"html_id":"list(node,entering)-instance-method","name":"list","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":55,"url":null},"def":{"name":"list","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  cr\n  if node.list_type.bullet?\n    out(\"<ul\")\n  else\n    out(\"<ol\")\n    if node.list_start > 1\n      out(\" start=\\\"#{node.list_start}\\\"\")\n    end\n  end\n  sourcepos(node)\n  out(\">\\n\")\nelse\n  out(node.list_type.bullet? ? \"</ul>\\n\" : \"</ol>\\n\")\nend"}},{"html_id":"paragraph(node,entering)-instance-method","name":"paragraph","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":130,"url":null},"def":{"name":"paragraph","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"grandparent = node.grandparent\ntight = false\nif !grandparent.nil? && grandparent.type.list?\n  tight = grandparent.list_tight?\nend\nif tight\n  return\nend\nif entering\n  cr\n  out(\"<p\")\n  sourcepos(node)\n  out(\">\")\nelse\n  if (node.parent.try do |__arg0|\n    __arg0.type.footnote_definition?\n  end) && node.next.nil?\n    out(\" \")\n    print_footnote_backref(node.parent.not_nil!)\n  end\n  out(\"</p>\\n\")\nend\n"}},{"html_id":"print_footnote_backref(node):Bool-instance-method","name":"print_footnote_backref","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node) : Bool","args_html":"(node) : Bool","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":370,"url":null},"def":{"name":"print_footnote_backref","args":[{"name":"node","external_name":"node","restriction":""}],"return_type":"Bool","visibility":"Public","body":"if @written_footnote_index >= @footnote_index\n  return false\nend\n@written_footnote_index = @footnote_index\ndef_literal = escape_html(node.footnote_definition_literal)\nout(\"<a href=\\\"#fnref-#{def_literal}\\\" class=\\\"footnote-backref\\\" data-footnote-backref aria-label=\\\"Back to content\\\">↩</a>\")\ndef_count = node.footnote_definition_count\nif def_count > 1\n  (2..def_count).each do |i|\n    out(\" <a href=\\\"#fnref-#{def_literal}-#{i}\\\" class=\\\"footnote-backref\\\" data-footnote-backref aria-label=\\\"Back to content\\\">↩\")\n    out(\"<sup class=\\\"footnote-ref\\\">#{i}</sup></a>\")\n  end\nend\ntrue\n"}},{"html_id":"softbreak(node)-instance-method","name":"softbreak","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":187,"url":null},"def":{"name":"softbreak","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"case @options\nwhen .hardbreaks?\n  out(\"<br />\\n\")\nwhen .nobreaks?\n  out(\" \")\nelse\n  out(\"\\n\")\nend"}},{"html_id":"sourcepos(node)-instance-method","name":"sourcepos","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":364,"url":null},"def":{"name":"sourcepos","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"if @options.sourcepos?\n  out(\" data-sourcepos=\\\"#{node.start_line}:#{node.start_column}-#{node.end_line}:#{node.end_column}\\\"\")\nend"}},{"html_id":"strikethrough(node,entering)-instance-method","name":"strikethrough","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":348,"url":null},"def":{"name":"strikethrough","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"out(entering ? \"<del>\" : \"</del>\")"}},{"html_id":"strong(node,entering)-instance-method","name":"strong","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":234,"url":null},"def":{"name":"strong","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  out(\"<strong>\")\nelse\n  out(\"</strong>\")\nend"}},{"html_id":"table(node,entering)-instance-method","name":"table","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":282,"url":null},"def":{"name":"table","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  cr\n  out(\"<table\")\n  sourcepos(node)\n  out(\">\")\n  @table_needs_closing_table_body = false\nelse\n  if @table_needs_closing_table_body\n    cr\n    out(\"</tbody>\")\n    cr\n  end\n  @table_needs_closing_table_body = false\n  cr\n  out(\"</table>\")\n  cr\nend"}},{"html_id":"table_cell(node,entering)-instance-method","name":"table_cell","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":329,"url":null},"def":{"name":"table_cell","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  cr\n  out(@table_in_table_header ? \"<th\" : \"<td\")\n  alignment = node.table_cell_alignment\n  if alignment.none?\n  else\n    if @options.table_prefer_style_attributes?\n      out(\" style=\\\"text-align: #{alignment.to_s.downcase}\\\"\")\n    else\n      out(\" align=\\\"#{alignment.to_s.downcase}\\\"\")\n    end\n  end\n  sourcepos(node)\n  out(\">\")\nelse\n  out(@table_in_table_header ? \"</th>\" : \"</td>\")\nend"}},{"html_id":"table_row(node,entering)-instance-method","name":"table_row","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":303,"url":null},"def":{"name":"table_row","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  cr\n  if node.table_row_header?\n    @table_in_table_header = true\n    out(\"<thead>\")\n    cr\n  else\n    if !@table_needs_closing_table_body\n      out(\"<tbody>\")\n      cr\n      @table_needs_closing_table_body = true\n    end\n  end\n  out(\"<tr\")\n  sourcepos(node)\n  out(\">\")\nelse\n  cr\n  out(\"</tr>\")\n  if node.table_row_header?\n    cr\n    out(\"</thead>\")\n    @table_in_table_header = false\n  end\nend"}},{"html_id":"tasklist_item_inner(node,entering)-instance-method","name":"tasklist_item_inner","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"args_string":"(node, entering)","args_html":"(node, entering)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":354,"url":null},"def":{"name":"tasklist_item_inner","args":[{"name":"node","external_name":"node","restriction":""},{"name":"entering","external_name":"entering","restriction":""}],"visibility":"Public","body":"if entering\n  if node.tasklist_item_checked?\n    out(\"<input type=\\\"checkbox\\\" checked=\\\"\\\" disabled=\\\"\\\" /> \")\n  else\n    out(\"<input type=\\\"checkbox\\\" disabled=\\\"\\\" /> \")\n  end\nend"}},{"html_id":"text(node)-instance-method","name":"text","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":183,"url":null},"def":{"name":"text","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"out(escape_html(node.literal))"}},{"html_id":"thematic_break(node)-instance-method","name":"thematic_break","abstract":false,"args":[{"name":"node","external_name":"node","restriction":""}],"args_string":"(node)","args_html":"(node)","location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":162,"url":null},"def":{"name":"thematic_break","args":[{"name":"node","external_name":"node","restriction":""}],"visibility":"Public","body":"cr\nout(\"<hr\")\nsourcepos(node)\nout(\" />\\n\")\n"}}],"macros":[{"html_id":"conditional_out_url_encoding-macro","name":"conditional_out_url_encoding","abstract":false,"location":{"filename":"src/cmark/renderers/html_renderer.cr","line_number":5,"url":null},"def":{"name":"conditional_out_url_encoding","visibility":"Public","body":"      \n{% verbatim do %}\n        if url && (@options.unsafe? || !(UNSAFE_URL_REGEX === url))\n          {% if (compare_versions(Crystal::VERSION, \"1.2.0\")) < 0 %}\n            out URI.encode(url)\n          {% else %}\n            uri = URI.parse(url)\n            encoded_uri = String.build do |str|\n              str << uri.scheme\n              str << \"://\"\n              str << uri.authority\n              str << URI.encode_path(uri.path) if uri.path\n              if uri.query\n                str << \"?\"\n                str << uri.query\n              end\n              if uri.fragment\n                str << \"#\"\n                str << uri.fragment\n              end\n            end\n            out \"#{encoded_uri}\"\n          {% end %}\n        end\n      {% end %}\n\n    \n"}}]},{"html_id":"cmark/Cmark/ListType","path":"Cmark/ListType.html","kind":"enum","full_name":"Cmark::ListType","name":"ListType","abstract":false,"ancestors":[{"html_id":"cmark/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cmark/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/list_type.cr","line_number":5,"url":null}],"repository_name":"cmark","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0"},{"id":"Bullet","name":"Bullet","value":"1"},{"id":"Ordered","name":"Ordered","value":"2"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A type of list for nodes with `NodeType::List`.","summary":"<p>A type of list for nodes with <code><a href=\"../Cmark/NodeType.html#List\">NodeType::List</a></code>.</p>","instance_methods":[{"html_id":"bullet?-instance-method","name":"bullet?","abstract":false,"location":{"filename":"src/cmark/list_type.cr","line_number":7,"url":null},"def":{"name":"bullet?","visibility":"Public","body":"self == Bullet"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/cmark/list_type.cr","line_number":6,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"ordered?-instance-method","name":"ordered?","abstract":false,"location":{"filename":"src/cmark/list_type.cr","line_number":8,"url":null},"def":{"name":"ordered?","visibility":"Public","body":"self == Ordered"}}]},{"html_id":"cmark/Cmark/Node","path":"Cmark/Node.html","kind":"class","full_name":"Cmark::Node","name":"Node","abstract":false,"superclass":{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/node.cr","line_number":102,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A node is a construct of the abstract syntax tree (AST) for a given markdown content.\n\nAt the very minimum every node has a `NodeType` —available via `#type`— even when invalid.\nHowever, given that each type of node has a set of required properties\n—which if are not set may lead to unintended behavior—\nall initializers of `Node` are protected. Nodes can be created\nin a safer manner either with the module `NodeMaker`, or with the parsing\nmethods of the module`Cmark` (which return a node with `NodeType::Document`).\n\nInstance methods can be grouped into:\n\n- Tree traversal\n  - `#next`\n  - `#previous`\n  - `#parent`\n  - `#grandparent`\n  - `#first_child`\n  - `#last_child`\n  - `#children`\n\n- Accessors\n  - `#type`\n  - `#literal`\n  - `#literal=`\n  - `#heading_level`\n  - `#heading_level=`\n  - `#list_type`\n  - `#list_type=`\n  - `#list_delim`\n  - `#list_delim=`\n  - `#list_start`\n  - `#list_start=`\n  - `#list_tight?`\n  - `#list_tight=`\n  - `#fence_info`\n  - `#fence_info=`\n  - `#fencing_details`\n  - `#fencing_details=`\n  - `#url`\n  - `#url=`\n  - `#title`\n  - `#title=`\n  - `#on_enter`\n  - `#on_enter=`\n  - `#on_exit`\n  - `#on_exit=`\n  - `#user_data`\n  - `#user_data=`\n  - `#start_line`\n  - `#end_line`\n  - `#start_column`\n  - `#end_column`\n  - `#autolink?`\n  - `#table_string_content`\n  - `#table_string_content=`\n  - `#table_columns`\n  - `#table_columns=`\n  - `#table_alignments`\n  - `#table_alignments=`\n  - `#table_row_header?`\n  - `#table_row_header=`\n  - `#tasklist_item?`\n  - `#tasklist_item=`\n  - `#tasklist_item_checked?`\n  - `#tasklist_item_checked=`\n  - `#footnote_reference_index`\n  - `#footnote_definition_count`\n  - `#footnote_definition_literal`\n  - `#footnote_parent_definition_literal`\n\n- Tree manipulation\n  - `#unlink`\n  - `#insert_before`\n  - `#insert_after`\n  - `#replace_with`\n  - `#prepend_child`\n  - `#append_child`\n  - `#consolidate_text_nodes`\n\n- Rendering\n  - `#render_xml`\n  - `#render_html`\n  - `#render_plaintext`\n  - `#render_commonmark`\n  - `#render_latex`\n  - `#render_man`\n\n- Equality\n  - `#==`\n\n- Containment\n  - `#can_contain?`\n\nNOTE: The `Node` class is a thin wrapper for the node struct of the\nunderlying cmark-gfm C library, as such, **familiarity with the\n[GFM Spec](https://github.github.com/gfm/) is required for advanced\nnode creation, processing, and rendering**.","summary":"<p>A node is a construct of the abstract syntax tree (AST) for a given markdown content.</p>","instance_methods":[{"html_id":"==(other:Node)-instance-method","name":"==","doc":"Returns true if both instances point to the same underlying node structure.","summary":"<p>Returns true if both instances point to the same underlying node structure.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Node"}],"args_string":"(other : Node)","args_html":"(other : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/node.cr","line_number":689,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Node"}],"visibility":"Public","body":"@node_p == other.node_p"}},{"html_id":"append_child(child:Node)-instance-method","name":"append_child","doc":"Adds child to the end of the children of node; raises `TreeManipulationError` on failure.","summary":"<p>Adds child to the end of the children of node; raises <code><a href=\"../Cmark/TreeManipulationError.html\">TreeManipulationError</a></code> on failure.</p>","abstract":false,"args":[{"name":"child","external_name":"child","restriction":"Node"}],"args_string":"(child : Node)","args_html":"(child : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/node.cr","line_number":621,"url":null},"def":{"name":"append_child","args":[{"name":"child","external_name":"child","restriction":"Node"}],"visibility":"Public","body":"result = LibCmark.cmark_node_append_child(@node_p, child.node_p)\nif result.zero?\n  raise(TreeManipulationError.new(\"Appending child #{child} for #{self} failed\"))\nend\n"}},{"html_id":"autolink?:Bool-instance-method","name":"autolink?","doc":"Returns true if the node is a Commonmark autolink, false otherwise.\n\nBeware that this method consolidates adjacent child text nodes if the node is a link.\n\nNOTE: When the GFM autolink extension is enabled, this method will not detect\n[extended www autolink](https://github.github.com/gfm/#extended-www-autolink) nor\n[extended autolink path validation](https://github.github.com/gfm/#extended-autolink-path-validation).\nHowever, [extended email autolink](https://github.github.com/gfm/#extended-email-autolink)\ntogether with simple autolinks constructed without the use of `<` and `>` as delimiters will\nbe recognized as autolinks.","summary":"<p>Returns true if the node is a Commonmark autolink, false otherwise.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":393,"url":null},"def":{"name":"autolink?","return_type":"Bool","visibility":"Public","body":"if self.type.link?\nelse\n  return false\nend\nif title == \"\"\nelse\n  return false\nend\nurl = self.url\nif url.nil? || url.empty?\n  return false\nend\nlink_text = self.first_child\nif link_text.nil?\n  return false\nend\nlink_text.consolidate_text_nodes\nif link_text.literal.nil?\n  return false\nend\nreal_url = url.starts_with?(\"mailto:\") ? url[7..-1] : url\nlink_text.literal == real_url\n"}},{"html_id":"can_contain?(node_type:NodeType):Bool-instance-method","name":"can_contain?","doc":"Returns true node can contain *node_type*, false otherwise.","summary":"<p>Returns true node can contain <em>node_type</em>, false otherwise.</p>","abstract":false,"args":[{"name":"node_type","external_name":"node_type","restriction":"NodeType"}],"args_string":"(node_type : NodeType) : Bool","args_html":"(node_type : <a href=\"../Cmark/NodeType.html\">NodeType</a>) : Bool","location":{"filename":"src/cmark/node.cr","line_number":682,"url":null},"def":{"name":"can_contain?","args":[{"name":"node_type","external_name":"node_type","restriction":"NodeType"}],"return_type":"Bool","visibility":"Public","body":"(LibCmark.cmark_node_can_contain_type(@node_p, node_type)) > 0"}},{"html_id":"children:Array(Node)-instance-method","name":"children","doc":"Returns children nodes or an empty array if there are none.","summary":"<p>Returns children nodes or an empty array if there are none.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":162,"url":null},"def":{"name":"children","return_type":"Array(Node)","visibility":"Public","body":"children = [] of Node\ncurrent_p = LibCmark.cmark_node_first_child(@node_p)\nlast_child_p = LibCmark.cmark_node_last_child(@node_p)\nwhile current_p\n  if (LibCmark.cmark_node_parent(current_p)) == @node_p\n    children.push(Node.new(current_p))\n  end\n  if current_p == last_child_p\n    break\n  end\n  current_p = LibCmark.cmark_node_next(current_p)\nend\nchildren\n"}},{"html_id":"consolidate_text_nodes-instance-method","name":"consolidate_text_nodes","doc":"Consolidates adjacent text nodes.","summary":"<p>Consolidates adjacent text nodes.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":627,"url":null},"def":{"name":"consolidate_text_nodes","visibility":"Public","body":"LibCmark.cmark_consolidate_text_nodes(@node_p)"}},{"html_id":"end_column:Int32-instance-method","name":"end_column","doc":"Returns the column on which node ends.","summary":"<p>Returns the column on which node ends.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":379,"url":null},"def":{"name":"end_column","return_type":"Int32","visibility":"Public","body":"LibCmark.cmark_node_get_end_column(@node_p)"}},{"html_id":"end_line:Int32-instance-method","name":"end_line","doc":"Returns the line on which node ends.","summary":"<p>Returns the line on which node ends.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":369,"url":null},"def":{"name":"end_line","return_type":"Int32","visibility":"Public","body":"LibCmark.cmark_node_get_end_line(@node_p)"}},{"html_id":"fence_info:String-instance-method","name":"fence_info","doc":"Returns the info string of a fenced code block.","summary":"<p>Returns the info string of a fenced code block.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":259,"url":null},"def":{"name":"fence_info","return_type":"String","visibility":"Public","body":"String.new(LibCmark.cmark_node_get_fence_info(@node_p))"}},{"html_id":"fence_info=(info:String):String-instance-method","name":"fence_info=","doc":"Sets the info string of a fenced code block; on failure it raises `NodeSetterError`.","summary":"<p>Sets the info string of a fenced code block; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"info","external_name":"info","restriction":"String"}],"args_string":"(info : String) : String","args_html":"(info : String) : String","location":{"filename":"src/cmark/node.cr","line_number":264,"url":null},"def":{"name":"fence_info=","args":[{"name":"info","external_name":"info","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_fence_info(@node_p, info)\nsetter_return_value\n"}},{"html_id":"fencing_details:FencingDetails|Nil-instance-method","name":"fencing_details","doc":"Returns fencing details of a code block.\n\nReturns nil if called on a node that is not a code block.","summary":"<p>Returns fencing details of a code block.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":272,"url":null},"def":{"name":"fencing_details","return_type":"FencingDetails | ::Nil","visibility":"Public","body":"fenced = (LibCmark.cmark_node_get_fenced(@node_p, out length, out offset, out character_i)) > 0\nif fenced && self.type.code_block?\nelse\n  return nil\nend\nbacktick = character_i.chr == '`'\nFencingDetails.new(length, offset, backtick)\n"}},{"html_id":"fencing_details=(details:FencingDetails):FencingDetails-instance-method","name":"fencing_details=","doc":"Sets fencing details of a code block; on failure it raises `NodeSetterError`.","summary":"<p>Sets fencing details of a code block; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"details","external_name":"details","restriction":"FencingDetails"}],"args_string":"(details : FencingDetails) : FencingDetails","args_html":"(details : <a href=\"../Cmark/FencingDetails.html\">FencingDetails</a>) : <a href=\"../Cmark/FencingDetails.html\">FencingDetails</a>","location":{"filename":"src/cmark/node.cr","line_number":280,"url":null},"def":{"name":"fencing_details=","args":[{"name":"details","external_name":"details","restriction":"FencingDetails"}],"return_type":"FencingDetails","visibility":"Public","body":"result = LibCmark.cmark_node_set_fenced(@node_p, 1, details.length, details.offset, details.character.ord)\nsetter_return_value\n"}},{"html_id":"first_child:Node|Nil-instance-method","name":"first_child","doc":"Returns the first_child node of this node.","summary":"<p>Returns the first_child node of this node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":150,"url":null},"def":{"name":"first_child","return_type":"Node | ::Nil","visibility":"Public","body":"first_child_p = LibCmark.cmark_node_first_child(@node_p)\nfirst_child_p.null? ? nil : Node.new(first_child_p)\n"}},{"html_id":"footnote_definition_count:Int32-instance-method","name":"footnote_definition_count","doc":"Returns the count the footnote definition.\n\nReturns 0 if the node is not a footnote definition.","summary":"<p>Returns the count the footnote definition.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":561,"url":null},"def":{"name":"footnote_definition_count","return_type":"Int32","visibility":"Public","body":"@node_p.value.footnote.def_count"}},{"html_id":"footnote_definition_literal:String-instance-method","name":"footnote_definition_literal","doc":"Returns the definition literal of the footnote.\n\nReturns an empty string if the node is not a footnote definition.","summary":"<p>Returns the definition literal of the footnote.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":568,"url":null},"def":{"name":"footnote_definition_literal","return_type":"String","visibility":"Public","body":"if self.type.footnote_definition?\n  _as = @node_p.value._as\n  String.new(_as.literal.data, _as.literal.len)\nelse\n  \"\"\nend"}},{"html_id":"footnote_parent_definition_literal:String-instance-method","name":"footnote_parent_definition_literal","doc":"Returns the definition literal of the footnote for this reference.\n\nReturns an empty string if the node is not a footnote reference.","summary":"<p>Returns the definition literal of the footnote for this reference.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":580,"url":null},"def":{"name":"footnote_parent_definition_literal","return_type":"String","visibility":"Public","body":"if self.type.footnote_reference?\n  _as = @node_p.value.parent_footnote_def.value._as\n  String.new(_as.literal.data, _as.literal.len)\nelse\n  \"\"\nend"}},{"html_id":"footnote_reference_index:Int32-instance-method","name":"footnote_reference_index","doc":"Returns the index of the footnote reference.\n\nReturns 0 if the node is not a footnote reference.","summary":"<p>Returns the index of the footnote reference.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":554,"url":null},"def":{"name":"footnote_reference_index","return_type":"Int32","visibility":"Public","body":"@node_p.value.footnote.ref_ix"}},{"html_id":"grandparent:Node|Nil-instance-method","name":"grandparent","doc":"Returns the grandparent node of this node.","summary":"<p>Returns the grandparent node of this node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":153,"url":null},"def":{"name":"grandparent","return_type":"Node | ::Nil","visibility":"Public","body":"parent_p = LibCmark.cmark_node_parent(@node_p)\nif parent_p.null?\nelse\n  grandparent_p = LibCmark.cmark_node_parent(parent_p)\n  if grandparent_p.null?\n  else\n    Node.new(grandparent_p)\n  end\nend\n"}},{"html_id":"heading_level:Int32-instance-method","name":"heading_level","doc":"Returns the heading level of node, or 0 if node is not a heading.","summary":"<p>Returns the heading level of node, or 0 if node is not a heading.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":204,"url":null},"def":{"name":"heading_level","return_type":"Int32","visibility":"Public","body":"LibCmark.cmark_node_get_heading_level(@node_p)"}},{"html_id":"heading_level=(heading_level:Int32):Int32-instance-method","name":"heading_level=","doc":"Sets the heading level of node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the heading level of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"heading_level","external_name":"heading_level","restriction":"Int32"}],"args_string":"(heading_level : Int32) : Int32","args_html":"(heading_level : Int32) : Int32","location":{"filename":"src/cmark/node.cr","line_number":209,"url":null},"def":{"name":"heading_level=","args":[{"name":"heading_level","external_name":"heading_level","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"result = LibCmark.cmark_node_set_heading_level(@node_p, heading_level)\nsetter_return_value\n"}},{"html_id":"insert_after(sibling:Node)-instance-method","name":"insert_after","doc":"Inserts sibling after node; raises `TreeManipulationError` on failure.","summary":"<p>Inserts sibling after node; raises <code><a href=\"../Cmark/TreeManipulationError.html\">TreeManipulationError</a></code> on failure.</p>","abstract":false,"args":[{"name":"sibling","external_name":"sibling","restriction":"Node"}],"args_string":"(sibling : Node)","args_html":"(sibling : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/node.cr","line_number":603,"url":null},"def":{"name":"insert_after","args":[{"name":"sibling","external_name":"sibling","restriction":"Node"}],"visibility":"Public","body":"result = LibCmark.cmark_node_insert_after(@node_p, sibling.node_p)\nif result.zero?\n  raise(TreeManipulationError.new(\"Inserting #{sibling} after #{self} failed\"))\nend\n"}},{"html_id":"insert_before(sibling:Node)-instance-method","name":"insert_before","doc":"Inserts sibling before node; raises `TreeManipulationError` on failure.","summary":"<p>Inserts sibling before node; raises <code><a href=\"../Cmark/TreeManipulationError.html\">TreeManipulationError</a></code> on failure.</p>","abstract":false,"args":[{"name":"sibling","external_name":"sibling","restriction":"Node"}],"args_string":"(sibling : Node)","args_html":"(sibling : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/node.cr","line_number":597,"url":null},"def":{"name":"insert_before","args":[{"name":"sibling","external_name":"sibling","restriction":"Node"}],"visibility":"Public","body":"result = LibCmark.cmark_node_insert_before(@node_p, sibling.node_p)\nif result.zero?\n  raise(TreeManipulationError.new(\"Inserting #{sibling} before #{self} failed\"))\nend\n"}},{"html_id":"last_child:Node|Nil-instance-method","name":"last_child","doc":"Returns the last_child node of this node.","summary":"<p>Returns the last_child node of this node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":150,"url":null},"def":{"name":"last_child","return_type":"Node | ::Nil","visibility":"Public","body":"last_child_p = LibCmark.cmark_node_last_child(@node_p)\nlast_child_p.null? ? nil : Node.new(last_child_p)\n"}},{"html_id":"list_delim:DelimType-instance-method","name":"list_delim","doc":"Returns the list delimiter of node, using `DelimType::None` if node is not a list.","summary":"<p>Returns the list delimiter of node, using <code><a href=\"../Cmark/DelimType.html#None\">DelimType::None</a></code> if node is not a list.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":226,"url":null},"def":{"name":"list_delim","return_type":"DelimType","visibility":"Public","body":"DelimType.new((LibCmark.cmark_node_get_list_delim(@node_p)).value)"}},{"html_id":"list_delim=(list_delim:DelimType):DelimType-instance-method","name":"list_delim=","doc":"Sets the list delimiter of node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the list delimiter of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"list_delim","external_name":"list_delim","restriction":"DelimType"}],"args_string":"(list_delim : DelimType) : DelimType","args_html":"(list_delim : <a href=\"../Cmark/DelimType.html\">DelimType</a>) : <a href=\"../Cmark/DelimType.html\">DelimType</a>","location":{"filename":"src/cmark/node.cr","line_number":231,"url":null},"def":{"name":"list_delim=","args":[{"name":"list_delim","external_name":"list_delim","restriction":"DelimType"}],"return_type":"DelimType","visibility":"Public","body":"result = LibCmark.cmark_node_set_list_delim(@node_p, LibCmark::DelimType.from_value(list_delim.value))\nsetter_return_value\n"}},{"html_id":"list_start:Int-instance-method","name":"list_start","doc":"Returns starting number of node, if it is an ordered list, otherwise 0.","summary":"<p>Returns starting number of node, if it is an ordered list, otherwise 0.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":237,"url":null},"def":{"name":"list_start","return_type":"Int","visibility":"Public","body":"LibCmark.cmark_node_get_list_start(@node_p)"}},{"html_id":"list_start=(list_start:Int32):Int32-instance-method","name":"list_start=","doc":"Sets the list delimiter of node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the list delimiter of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"list_start","external_name":"list_start","restriction":"Int32"}],"args_string":"(list_start : Int32) : Int32","args_html":"(list_start : Int32) : Int32","location":{"filename":"src/cmark/node.cr","line_number":242,"url":null},"def":{"name":"list_start=","args":[{"name":"list_start","external_name":"list_start","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"result = LibCmark.cmark_node_set_list_start(@node_p, list_start)\nsetter_return_value\n"}},{"html_id":"list_tight=(tight:Bool):Bool-instance-method","name":"list_tight=","doc":"Sets the list tightness of node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the list tightness of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"tight","external_name":"tight","restriction":"Bool"}],"args_string":"(tight : Bool) : Bool","args_html":"(tight : Bool) : Bool","location":{"filename":"src/cmark/node.cr","line_number":253,"url":null},"def":{"name":"list_tight=","args":[{"name":"tight","external_name":"tight","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"result = LibCmark.cmark_node_set_list_tight(@node_p, tight)\nsetter_return_value\n"}},{"html_id":"list_tight?:Bool-instance-method","name":"list_tight?","doc":"Returns true if node is a tight list, or false if loose.","summary":"<p>Returns true if node is a tight list, or false if loose.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":248,"url":null},"def":{"name":"list_tight?","return_type":"Bool","visibility":"Public","body":"(LibCmark.cmark_node_get_list_tight(@node_p)) > 0"}},{"html_id":"list_type:ListType-instance-method","name":"list_type","doc":"Returns the list type of node, using `ListType::None` if node is not a list.","summary":"<p>Returns the list type of node, using <code><a href=\"../Cmark/ListType.html#None\">ListType::None</a></code> if node is not a list.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":215,"url":null},"def":{"name":"list_type","return_type":"ListType","visibility":"Public","body":"ListType.new((LibCmark.cmark_node_get_list_type(@node_p)).value)"}},{"html_id":"list_type=(list_type:ListType):ListType-instance-method","name":"list_type=","doc":"Sets the list type of node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the list type of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"list_type","external_name":"list_type","restriction":"ListType"}],"args_string":"(list_type : ListType) : ListType","args_html":"(list_type : <a href=\"../Cmark/ListType.html\">ListType</a>) : <a href=\"../Cmark/ListType.html\">ListType</a>","location":{"filename":"src/cmark/node.cr","line_number":220,"url":null},"def":{"name":"list_type=","args":[{"name":"list_type","external_name":"list_type","restriction":"ListType"}],"return_type":"ListType","visibility":"Public","body":"result = LibCmark.cmark_node_set_list_type(@node_p, LibCmark::ListType.from_value(list_type.value))\nsetter_return_value\n"}},{"html_id":"literal:String-instance-method","name":"literal","doc":"Returns the literal string contents of node, or an empty string if none is set.","summary":"<p>Returns the literal string contents of node, or an empty string if none is set.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":192,"url":null},"def":{"name":"literal","return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_get_literal(@node_p)\nresult.null? ? \"\" : String.new(result)\n"}},{"html_id":"literal=(literal:String):String-instance-method","name":"literal=","doc":"Sets the literal string contents of node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the literal string contents of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"literal","external_name":"literal","restriction":"String"}],"args_string":"(literal : String) : String","args_html":"(literal : String) : String","location":{"filename":"src/cmark/node.cr","line_number":198,"url":null},"def":{"name":"literal=","args":[{"name":"literal","external_name":"literal","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_literal(@node_p, literal)\nsetter_return_value\n"}},{"html_id":"next:Node|Nil-instance-method","name":"next","doc":"Returns the next node of this node.","summary":"<p>Returns the next node of this node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":150,"url":null},"def":{"name":"next","return_type":"Node | ::Nil","visibility":"Public","body":"next_p = LibCmark.cmark_node_next(@node_p)\nnext_p.null? ? nil : Node.new(next_p)\n"}},{"html_id":"on_enter:String-instance-method","name":"on_enter","doc":"Returns the literal *on_enter* of a custom node or an empty string if unset.","summary":"<p>Returns the literal <em>on_enter</em> of a custom node or an empty string if unset.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":312,"url":null},"def":{"name":"on_enter","return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_get_on_enter(@node_p)\nresult.null? ? \"\" : String.new(result)\n"}},{"html_id":"on_enter=(on_enter:String):String-instance-method","name":"on_enter=","doc":"Sets the literal *on_enter* of a custom node; on failure it raises `NodeSetterError`.\n\nAny children of the node will be rendered after this text.","summary":"<p>Sets the literal <em>on_enter</em> of a custom node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"on_enter","external_name":"on_enter","restriction":"String"}],"args_string":"(on_enter : String) : String","args_html":"(on_enter : String) : String","location":{"filename":"src/cmark/node.cr","line_number":320,"url":null},"def":{"name":"on_enter=","args":[{"name":"on_enter","external_name":"on_enter","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_on_enter(@node_p, on_enter)\nsetter_return_value\n"}},{"html_id":"on_exit:String-instance-method","name":"on_exit","doc":"Returns the literal *on_exit* of a custom node or an empty string if unset.\n\nReturns nil if called on a node that is not custom.","summary":"<p>Returns the literal <em>on_exit</em> of a custom node or an empty string if unset.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":328,"url":null},"def":{"name":"on_exit","return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_get_on_exit(@node_p)\nresult.null? ? \"\" : String.new(result)\n"}},{"html_id":"on_exit=(on_exit:String):String-instance-method","name":"on_exit=","doc":"Sets the literal *on_exit* of a custom node; on failure it raises `NodeSetterError`.\n\nAny children of the node will be rendered before this text.","summary":"<p>Sets the literal <em>on_exit</em> of a custom node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"on_exit","external_name":"on_exit","restriction":"String"}],"args_string":"(on_exit : String) : String","args_html":"(on_exit : String) : String","location":{"filename":"src/cmark/node.cr","line_number":336,"url":null},"def":{"name":"on_exit=","args":[{"name":"on_exit","external_name":"on_exit","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_on_exit(@node_p, on_exit)\nsetter_return_value\n"}},{"html_id":"parent:Node|Nil-instance-method","name":"parent","doc":"Returns the parent node of this node.","summary":"<p>Returns the parent node of this node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":150,"url":null},"def":{"name":"parent","return_type":"Node | ::Nil","visibility":"Public","body":"parent_p = LibCmark.cmark_node_parent(@node_p)\nparent_p.null? ? nil : Node.new(parent_p)\n"}},{"html_id":"prepend_child(child:Node)-instance-method","name":"prepend_child","doc":"Adds child to the beginning of the children of node; raises `TreeManipulationError` on failure.","summary":"<p>Adds child to the beginning of the children of node; raises <code><a href=\"../Cmark/TreeManipulationError.html\">TreeManipulationError</a></code> on failure.</p>","abstract":false,"args":[{"name":"child","external_name":"child","restriction":"Node"}],"args_string":"(child : Node)","args_html":"(child : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/node.cr","line_number":615,"url":null},"def":{"name":"prepend_child","args":[{"name":"child","external_name":"child","restriction":"Node"}],"visibility":"Public","body":"result = LibCmark.cmark_node_prepend_child(@node_p, child.node_p)\nif result.zero?\n  raise(TreeManipulationError.new(\"Prepending child #{child} for #{self} failed\"))\nend\n"}},{"html_id":"previous:Node|Nil-instance-method","name":"previous","doc":"Returns the previous node of this node.","summary":"<p>Returns the previous node of this node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":150,"url":null},"def":{"name":"previous","return_type":"Node | ::Nil","visibility":"Public","body":"previous_p = LibCmark.cmark_node_previous(@node_p)\nprevious_p.null? ? nil : Node.new(previous_p)\n"}},{"html_id":"render_commonmark(options=Option::None,width=120):String-instance-method","name":"render_commonmark","doc":"Renders node tree as a commonmark string, including GFM extension nodes, if present.","summary":"<p>Renders node tree as a commonmark string, including GFM extension nodes, if present.</p>","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"120","external_name":"width","restriction":""}],"args_string":"(options = Option::None, width = 120) : String","args_html":"(options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, width = <span class=\"n\">120</span>) : String","location":{"filename":"src/cmark/node.cr","line_number":662,"url":null},"def":{"name":"render_commonmark","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"120","external_name":"width","restriction":""}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_render_commonmark(node_p, options, width)\nString.new(result)\n"}},{"html_id":"render_html(options=Option::None,extensions=Extension::None):String-instance-method","name":"render_html","doc":"Renders node tree as an HTML string.","summary":"<p>Renders node tree as an HTML string.</p>","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":""}],"args_string":"(options = Option::None, extensions = Extension::None) : String","args_html":"(options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, extensions = <span class=\"t\">Extension</span><span class=\"t\">::</span><span class=\"t\">None</span>) : String","location":{"filename":"src/cmark/node.cr","line_number":640,"url":null},"def":{"name":"render_html","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":""}],"return_type":"String","visibility":"Public","body":"if options.unsafe? && extensions.tagfilter?\n  mem_p = LibCmark.cmark_get_default_mem_allocator\n  list_p = LibCmark.cmark_list_syntax_extensions(mem_p)\n  result = LibCmark.cmark_render_html(@node_p, options, list_p)\n  LibCmark.cmark_llist_free(mem_p, list_p)\n  String.new(result)\nelse\n  list_p = Pointer(LibCmark::CmarkLinkedList).null\n  result = LibCmark.cmark_render_html(@node_p, options, list_p)\n  String.new(result)\nend"}},{"html_id":"render_latex(options=Option::None,width=120):String-instance-method","name":"render_latex","doc":"Renders node tree as a LaTeX string.","summary":"<p>Renders node tree as a LaTeX string.</p>","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"120","external_name":"width","restriction":""}],"args_string":"(options = Option::None, width = 120) : String","args_html":"(options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, width = <span class=\"n\">120</span>) : String","location":{"filename":"src/cmark/node.cr","line_number":668,"url":null},"def":{"name":"render_latex","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"120","external_name":"width","restriction":""}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_render_latex(node_p, options, width)\nString.new(result)\n"}},{"html_id":"render_man(options=Option::None,width=80):String-instance-method","name":"render_man","doc":"Renders node tree as a groff man page string.","summary":"<p>Renders node tree as a groff man page string.</p>","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"80","external_name":"width","restriction":""}],"args_string":"(options = Option::None, width = 80) : String","args_html":"(options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, width = <span class=\"n\">80</span>) : String","location":{"filename":"src/cmark/node.cr","line_number":674,"url":null},"def":{"name":"render_man","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"80","external_name":"width","restriction":""}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_render_man(node_p, options, width)\nString.new(result)\n"}},{"html_id":"render_plaintext(options=Option::None,width=120):String-instance-method","name":"render_plaintext","doc":"Renders node tree as a plaintext string.","summary":"<p>Renders node tree as a plaintext string.</p>","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"120","external_name":"width","restriction":""}],"args_string":"(options = Option::None, width = 120) : String","args_html":"(options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, width = <span class=\"n\">120</span>) : String","location":{"filename":"src/cmark/node.cr","line_number":656,"url":null},"def":{"name":"render_plaintext","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""},{"name":"width","default_value":"120","external_name":"width","restriction":""}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_render_plaintext(node_p, options, width)\nString.new(result)\n"}},{"html_id":"render_xml(options=Option::None):String-instance-method","name":"render_xml","doc":"Renders node tree an XML string.","summary":"<p>Renders node tree an XML string.</p>","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"args_string":"(options = Option::None) : String","args_html":"(options = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>) : String","location":{"filename":"src/cmark/node.cr","line_number":634,"url":null},"def":{"name":"render_xml","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":""}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_render_xml(node_p, options)\nString.new(result)\n"}},{"html_id":"replace_with(new_node:Node)-instance-method","name":"replace_with","doc":"Replaces node with *new_node*; raises `TreeManipulationError` on failure.","summary":"<p>Replaces node with <em>new_node</em>; raises <code><a href=\"../Cmark/TreeManipulationError.html\">TreeManipulationError</a></code> on failure.</p>","abstract":false,"args":[{"name":"new_node","external_name":"new_node","restriction":"Node"}],"args_string":"(new_node : Node)","args_html":"(new_node : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/node.cr","line_number":609,"url":null},"def":{"name":"replace_with","args":[{"name":"new_node","external_name":"new_node","restriction":"Node"}],"visibility":"Public","body":"result = LibCmark.cmark_node_replace(@node_p, new_node.node_p)\nif result.zero?\n  raise(TreeManipulationError.new(\"Replacing #{self} with #{new_node} failed\"))\nend\n"}},{"html_id":"start_column:Int32-instance-method","name":"start_column","doc":"Returns the column on which node begins.","summary":"<p>Returns the column on which node begins.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":374,"url":null},"def":{"name":"start_column","return_type":"Int32","visibility":"Public","body":"LibCmark.cmark_node_get_start_column(@node_p)"}},{"html_id":"start_line:Int32-instance-method","name":"start_line","doc":"Returns the line on which node begins.","summary":"<p>Returns the line on which node begins.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":364,"url":null},"def":{"name":"start_line","return_type":"Int32","visibility":"Public","body":"LibCmark.cmark_node_get_start_line(@node_p)"}},{"html_id":"table_alignments:Array(Alignment)-instance-method","name":"table_alignments","doc":"Returns the alignments of columns for the table.\n\nReturns an empty array if called on a node that is not a table.","summary":"<p>Returns the alignments of columns for the table.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":456,"url":null},"def":{"name":"table_alignments","return_type":"Array(Alignment)","visibility":"Public","body":"alignments = [] of Alignment\nalignments_p = LibCmark.cmark_gfm_extensions_get_table_alignments(@node_p)\nn_columns = self.table_columns\ni = 0\nwhile i < n_columns\n  alignments.push(Alignment.from_value(alignments_p[i]))\n  i = i + 1\nend\nalignments\n"}},{"html_id":"table_alignments=(alignments:Array(Alignment)):Array(Alignment)-instance-method","name":"table_alignments=","doc":"Sets the alignments of columns for the table; on failure it raises `NodeSetterError`.\n\nIt should be called only on table nodes.\n\nExample for a table node with two columns:\n```\nnode.table_alignments = [Alignment::Center, Alignment::Right]\n```","summary":"<p>Sets the alignments of columns for the table; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"alignments","external_name":"alignments","restriction":"Array(Alignment)"}],"args_string":"(alignments : Array(Alignment)) : Array(Alignment)","args_html":"(alignments : Array(<a href=\"../Cmark/Alignment.html\">Alignment</a>)) : Array(<a href=\"../Cmark/Alignment.html\">Alignment</a>)","location":{"filename":"src/cmark/node.cr","line_number":476,"url":null},"def":{"name":"table_alignments=","args":[{"name":"alignments","external_name":"alignments","restriction":"Array(Alignment)"}],"return_type":"Array(Alignment)","visibility":"Public","body":"alignments_p = Pointer.malloc(alignments.size) do |i|\n  alignments[i].value\nend\nresult = LibCmark.cmark_gfm_extensions_set_table_alignments(@node_p, alignments.size, alignments_p)\nsetter_return_value\n"}},{"html_id":"table_cell_alignment:Alignment-instance-method","name":"table_cell_alignment","doc":"Returns node table alignment or `Alignment::None` if called on a node that is not a table cell.","summary":"<p>Returns node table alignment or <code><a href=\"../Cmark/Alignment.html#None\">Alignment::None</a></code> if called on a node that is not a table cell.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":494,"url":null},"def":{"name":"table_cell_alignment","return_type":"Alignment","visibility":"Public","body":"if self.type.table_cell?\nelse\n  return Alignment::None\nend\nparent_p = LibCmark.cmark_node_parent(@node_p)\nif parent_p.null?\n  return Alignment::None\nend\ngrandparent_p = LibCmark.cmark_node_parent(parent_p)\nif grandparent_p.null?\n  return Alignment::None\nend\nloop_node_p = LibCmark.cmark_node_first_child(parent_p)\ni = 0\nwhile loop_node_p != @node_p\n  loop_node_p = LibCmark.cmark_node_next(loop_node_p)\n  if (LibCmark.cmark_node_get_type(loop_node_p)) == LibCmark.cmark_node_table_cell\n    i = i + 1\n  end\nend\nalignments_p = LibCmark.cmark_gfm_extensions_get_table_alignments(grandparent_p)\nAlignment.from_value(alignments_p[i])\n"}},{"html_id":"table_columns:UInt16-instance-method","name":"table_columns","doc":"Returns the number of columns for the table.\n\nReturns 0 if called on a node that is not a table.","summary":"<p>Returns the number of columns for the table.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":437,"url":null},"def":{"name":"table_columns","return_type":"UInt16","visibility":"Public","body":"LibCmark.cmark_gfm_extensions_get_table_columns(@node_p)"}},{"html_id":"table_columns=(n_columns:UInt16):UInt16-instance-method","name":"table_columns=","doc":"Sets the number of columns for the table; on failure it raises `NodeSetterError`.\n\nIt must be called only on table and table row nodes that already have defined columns.","summary":"<p>Sets the number of columns for the table; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"n_columns","external_name":"n_columns","restriction":"UInt16"}],"args_string":"(n_columns : UInt16) : UInt16","args_html":"(n_columns : UInt16) : UInt16","location":{"filename":"src/cmark/node.cr","line_number":444,"url":null},"def":{"name":"table_columns=","args":[{"name":"n_columns","external_name":"n_columns","restriction":"UInt16"}],"return_type":"UInt16","visibility":"Public","body":"type = self.type\nif (type.table? || type.table_row?) && self.table_columns.zero?\n  raise(NodeSetterError.new(\"Cannot set table columns on a #{type} node with 0 columns\"))\nend\nresult = LibCmark.cmark_gfm_extensions_set_table_columns(@node_p, n_columns)\nsetter_return_value\n"}},{"html_id":"table_row_header=(header:Bool):Bool-instance-method","name":"table_row_header=","doc":"Sets a table row as table header.","summary":"<p>Sets a table row as table header.</p>","abstract":false,"args":[{"name":"header","external_name":"header","restriction":"Bool"}],"args_string":"(header : Bool) : Bool","args_html":"(header : Bool) : Bool","location":{"filename":"src/cmark/node.cr","line_number":488,"url":null},"def":{"name":"table_row_header=","args":[{"name":"header","external_name":"header","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"result = LibCmark.cmark_gfm_extensions_set_table_row_is_header(@node_p, header)\nsetter_return_value\n"}},{"html_id":"table_row_header?:Bool-instance-method","name":"table_row_header?","doc":"Returns true if the the node is a header table row, false otherwise.","summary":"<p>Returns true if the the node is a header table row, false otherwise.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":483,"url":null},"def":{"name":"table_row_header?","return_type":"Bool","visibility":"Public","body":"(LibCmark.cmark_gfm_extensions_get_table_row_is_header(@node_p)) > 0"}},{"html_id":"table_string_content:String-instance-method","name":"table_string_content","doc":"Returns the string content of tables and table cells, otherwise an empty string.\n\nWith the following table\n\n```text\n| foo | bar |\n| --- | --- |\n| baz | bim |\n```\nthe string content of table is the header row `| foo | bar |`. and the\nstring content of the cells is `foo`, `bar`, `baz`, and `bim`.\n","summary":"<p>Returns the string content of tables and table cells, otherwise an empty string.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":421,"url":null},"def":{"name":"table_string_content","return_type":"String","visibility":"Public","body":"String.new(LibCmark.cmark_node_get_string_content(@node_p))"}},{"html_id":"table_string_content=(content:String):String-instance-method","name":"table_string_content=","doc":"Sets the table string content for tables and table cells.\n\nBeware of setting incorrect string content.\nSee `#table_string_content` for more information.","summary":"<p>Sets the table string content for tables and table cells.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String) : String","args_html":"(content : String) : String","location":{"filename":"src/cmark/node.cr","line_number":429,"url":null},"def":{"name":"table_string_content=","args":[{"name":"content","external_name":"content","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_string_content(@node_p, content)\nsetter_return_value\n"}},{"html_id":"tasklist_item=(tasklist:Bool):Bool-instance-method","name":"tasklist_item=","doc":"Sets a list item as tasklist item; on failure it raises `NodeSetterError`.\n\nIt must be called only on nodes with `NodeType::Item`.","summary":"<p>Sets a list item as tasklist item; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"tasklist","external_name":"tasklist","restriction":"Bool"}],"args_string":"(tasklist : Bool) : Bool","args_html":"(tasklist : Bool) : Bool","location":{"filename":"src/cmark/node.cr","line_number":523,"url":null},"def":{"name":"tasklist_item=","args":[{"name":"tasklist","external_name":"tasklist","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"result = case\nwhen self.tasklist_item?\n  tasklist ? 1 : LibCmark.cmark_node_set_syntax_extension(@node_p, nil)\nwhen self.type.item?\n  if tasklist\n    extension_p = LibCmark.cmark_find_syntax_extension(\"tasklist\")\n    LibCmark.cmark_node_set_syntax_extension(@node_p, extension_p)\n  else\n    1\n  end\nelse\n  0\nend\nsetter_return_value\n"}},{"html_id":"tasklist_item?:Bool-instance-method","name":"tasklist_item?","doc":"Returns true is a node is a tasklist item, false otherwise.","summary":"<p>Returns true is a node is a tasklist item, false otherwise.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":511,"url":null},"def":{"name":"tasklist_item?","return_type":"Bool","visibility":"Public","body":"if self.type.item?\n  ext_p = LibCmark.cmark_node_get_syntax_extension(@node_p)\n  ext_p.null? ? false : \"tasklist\" == (String.new(ext_p.value.name))\nelse\n  false\nend"}},{"html_id":"tasklist_item_checked=(checked:Bool):Bool-instance-method","name":"tasklist_item_checked=","doc":"Sets the checked status of tasklist item: on failure it raises `NodeSetterError`.","summary":"<p>Sets the checked status of tasklist item: on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"checked","external_name":"checked","restriction":"Bool"}],"args_string":"(checked : Bool) : Bool","args_html":"(checked : Bool) : Bool","location":{"filename":"src/cmark/node.cr","line_number":546,"url":null},"def":{"name":"tasklist_item_checked=","args":[{"name":"checked","external_name":"checked","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"result = LibCmark.cmark_gfm_extensions_set_tasklist_item_checked(@node_p, checked)\nsetter_return_value\n"}},{"html_id":"tasklist_item_checked?:Bool-instance-method","name":"tasklist_item_checked?","doc":"Returns true is a node is a tasklist_item and is checked, false otherwise.","summary":"<p>Returns true is a node is a tasklist_item and is checked, false otherwise.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":541,"url":null},"def":{"name":"tasklist_item_checked?","return_type":"Bool","visibility":"Public","body":"(LibCmark.cmark_gfm_extensions_get_tasklist_item_checked(@node_p)) > 0"}},{"html_id":"title:String-instance-method","name":"title","doc":"Returns the title of a link or image node, or an empty string if no title is set.","summary":"<p>Returns the title of a link or image node, or an empty string if no title is set.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":300,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_get_title(@node_p)\nresult.null? ? \"\" : String.new(result)\n"}},{"html_id":"title=(title:String):String-instance-method","name":"title=","doc":"Sets the title of a link or image node; on failure it raises `NodeSetterError`.","summary":"<p>Sets the title of a link or image node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String) : String","args_html":"(title : String) : String","location":{"filename":"src/cmark/node.cr","line_number":306,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_title(@node_p, title)\nsetter_return_value\n"}},{"html_id":"type:NodeType-instance-method","name":"type","doc":"Returns the type of node.","summary":"<p>Returns the type of node.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":177,"url":null},"def":{"name":"type","return_type":"NodeType","visibility":"Public","body":"if type = NodeType.from_value?((LibCmark.cmark_node_get_type(@node_p)).value)\nelse\n  type_name = self.type_original_string\n  if type_name == \"table_header\"\n    type_name = \"table_row\"\n  end\n  type = NodeType.parse(type_name)\nend\ntype\n"}},{"html_id":"unlink-instance-method","name":"unlink","doc":"Unlinks this node from the AST.","summary":"<p>Unlinks this node from the AST.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":592,"url":null},"def":{"name":"unlink","visibility":"Public","body":"LibCmark.cmark_node_unlink(@node_p)"}},{"html_id":"url:String-instance-method","name":"url","doc":"Returns the URL of a link or image node, or an empty string if no URL is set.","summary":"<p>Returns the URL of a link or image node, or an empty string if no URL is set.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":286,"url":null},"def":{"name":"url","return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_get_url(@node_p)\nresult.null? ? \"\" : String.new(result)\n"}},{"html_id":"url=(url:String):String-instance-method","name":"url=","doc":"Sets the URL of node; on failure it raises `NodeSetterError`.\n\nIt must be called only on link or image nodes.","summary":"<p>Sets the URL of node; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"}],"args_string":"(url : String) : String","args_html":"(url : String) : String","location":{"filename":"src/cmark/node.cr","line_number":294,"url":null},"def":{"name":"url=","args":[{"name":"url","external_name":"url","restriction":"String"}],"return_type":"String","visibility":"Public","body":"result = LibCmark.cmark_node_set_url(@node_p, url)\nsetter_return_value\n"}},{"html_id":"user_data:Pointer(Void)-instance-method","name":"user_data","doc":"Returns the user data of node, which can then be unboxed.\n\nExample:\n```\nnode = NodeMaker.text(\"Hi\")\nnode.user_data.null? # => true\nnode.user_data = Box.box(:greetings)\nuser_data = Box(Symbol).unbox(node.user_data)\nuser_data # => :grettings\n```","summary":"<p>Returns the user data of node, which can then be unboxed.</p>","abstract":false,"location":{"filename":"src/cmark/node.cr","line_number":351,"url":null},"def":{"name":"user_data","return_type":"Pointer(Void)","visibility":"Public","body":"LibCmark.cmark_node_get_user_data(@node_p)"}},{"html_id":"user_data=(user_data:Pointer(Void)):Pointer(Void)-instance-method","name":"user_data=","doc":"Sets the user data of node, which should be already boxed; on failure it raises `NodeSetterError`.\n\nNOTE: *user_data* must be boxed into the node struct of the C library; see `#user_data`.","summary":"<p>Sets the user data of node, which should be already boxed; on failure it raises <code><a href=\"../Cmark/NodeSetterError.html\">NodeSetterError</a></code>.</p>","abstract":false,"args":[{"name":"user_data","external_name":"user_data","restriction":"Pointer(Void)"}],"args_string":"(user_data : Pointer(Void)) : Pointer(Void)","args_html":"(user_data : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/cmark/node.cr","line_number":358,"url":null},"def":{"name":"user_data=","args":[{"name":"user_data","external_name":"user_data","restriction":"Pointer(Void)"}],"return_type":"Pointer(Void)","visibility":"Public","body":"result = LibCmark.cmark_node_set_user_data(@node_p, user_data)\nsetter_return_value\n"}}]},{"html_id":"cmark/Cmark/NodeMaker","path":"Cmark/NodeMaker.html","kind":"module","full_name":"Cmark::NodeMaker","name":"NodeMaker","abstract":false,"locations":[{"filename":"src/cmark/node_maker.cr","line_number":9,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A convenience class to safely create `Node` instances with a predefined `NodeType`.\n\nNOTE: The methods herein only create the given node(s) *per se*,\n**it is the responsibility of the module user to create and assign the necessary\nparent and child nodes of the respective created nodes**.","summary":"<p>A convenience class to safely create <code><a href=\"../Cmark/Node.html\">Node</a></code> instances with a predefined <code><a href=\"../Cmark/NodeType.html\">NodeType</a></code>.</p>","class_methods":[{"html_id":"block_quote:Node-class-method","name":"block_quote","doc":"Makes a node with `NodeType::BlockQuote`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#BlockQuote\">NodeType::BlockQuote</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"block_quote","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_BLOCK_QUOTE)"}},{"html_id":"code(literal:String):Node-class-method","name":"code","doc":"Makes a node with `NodeType::Code`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Code\">NodeType::Code</a></code>.</p>","abstract":false,"args":[{"name":"literal","external_name":"literal","restriction":"String"}],"args_string":"(literal : String) : Node","args_html":"(literal : String) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":41,"url":null},"def":{"name":"code","args":[{"name":"literal","external_name":"literal","restriction":"String"}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_CODE)\nnode.literal = literal\nnode\n"}},{"html_id":"code_block(contents:String,fence_info:String=\"\")-class-method","name":"code_block","abstract":false,"args":[{"name":"contents","external_name":"contents","restriction":"String"},{"name":"fence_info","default_value":"\"\"","external_name":"fence_info","restriction":"String"}],"args_string":"(contents : String, fence_info : String = \"\")","args_html":"(contents : String, fence_info : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/cmark/node_maker.cr","line_number":102,"url":null},"def":{"name":"code_block","args":[{"name":"contents","external_name":"contents","restriction":"String"},{"name":"fence_info","default_value":"\"\"","external_name":"fence_info","restriction":"String"}],"visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_CODE_BLOCK)\nnode.fence_info = fence_info\nnode.fencing_details = FencingDetails.new(3, 0, true)\nnode.literal = contents\nnode\n"}},{"html_id":"custom_block(on_enter:String=\"\",on_exit:String=\"\")-class-method","name":"custom_block","doc":"Mades a node with `NodeType::CUSTOM_BLOCK`.","summary":"<p>Mades a node with <code>NodeType::CUSTOM_BLOCK</code>.</p>","abstract":false,"args":[{"name":"on_enter","default_value":"\"\"","external_name":"on_enter","restriction":"String"},{"name":"on_exit","default_value":"\"\"","external_name":"on_exit","restriction":"String"}],"args_string":"(on_enter : String = \"\", on_exit : String = \"\")","args_html":"(on_enter : String = <span class=\"s\">&quot;&quot;</span>, on_exit : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/cmark/node_maker.cr","line_number":111,"url":null},"def":{"name":"custom_block","args":[{"name":"on_enter","default_value":"\"\"","external_name":"on_enter","restriction":"String"},{"name":"on_exit","default_value":"\"\"","external_name":"on_exit","restriction":"String"}],"visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_CUSTOM_BLOCK)\nnode.on_enter = on_enter\nnode.on_exit = on_exit\nnode\n"}},{"html_id":"custom_inline(on_enter:String=\"\",on_exit:String=\"\")-class-method","name":"custom_inline","doc":"Mades a node with `NodeType::CUSTOM_INLINE`.","summary":"<p>Mades a node with <code>NodeType::CUSTOM_INLINE</code>.</p>","abstract":false,"args":[{"name":"on_enter","default_value":"\"\"","external_name":"on_enter","restriction":"String"},{"name":"on_exit","default_value":"\"\"","external_name":"on_exit","restriction":"String"}],"args_string":"(on_enter : String = \"\", on_exit : String = \"\")","args_html":"(on_enter : String = <span class=\"s\">&quot;&quot;</span>, on_exit : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/cmark/node_maker.cr","line_number":111,"url":null},"def":{"name":"custom_inline","args":[{"name":"on_enter","default_value":"\"\"","external_name":"on_enter","restriction":"String"},{"name":"on_exit","default_value":"\"\"","external_name":"on_exit","restriction":"String"}],"visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_CUSTOM_INLINE)\nnode.on_enter = on_enter\nnode.on_exit = on_exit\nnode\n"}},{"html_id":"document:Node-class-method","name":"document","doc":"Makes a node with `NodeType::Document`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Document\">NodeType::Document</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"document","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_DOCUMENT)"}},{"html_id":"emph:Node-class-method","name":"emph","doc":"Makes a node with `NodeType::Emph`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Emph\">NodeType::Emph</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"emph","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_EMPH)"}},{"html_id":"heading(level:Int32=1):Node-class-method","name":"heading","abstract":false,"args":[{"name":"level","default_value":"1","external_name":"level","restriction":"Int32"}],"args_string":"(level : Int32 = 1) : Node","args_html":"(level : Int32 = <span class=\"n\">1</span>) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":78,"url":null},"def":{"name":"heading","args":[{"name":"level","default_value":"1","external_name":"level","restriction":"Int32"}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_HEADING)\nnode.heading_level = level\nnode\n"}},{"html_id":"html_block(literal:String):Node-class-method","name":"html_block","doc":"Makes a node with `NodeType::HTMLBlock`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#HTMLBlock\">NodeType::HTMLBlock</a></code>.</p>","abstract":false,"args":[{"name":"literal","external_name":"literal","restriction":"String"}],"args_string":"(literal : String) : Node","args_html":"(literal : String) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":41,"url":null},"def":{"name":"html_block","args":[{"name":"literal","external_name":"literal","restriction":"String"}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_HTML_BLOCK)\nnode.literal = literal\nnode\n"}},{"html_id":"html_inline(literal:String):Node-class-method","name":"html_inline","doc":"Makes a node with `NodeType::HTMLInline`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#HTMLInline\">NodeType::HTMLInline</a></code>.</p>","abstract":false,"args":[{"name":"literal","external_name":"literal","restriction":"String"}],"args_string":"(literal : String) : Node","args_html":"(literal : String) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":41,"url":null},"def":{"name":"html_inline","args":[{"name":"literal","external_name":"literal","restriction":"String"}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_HTML_INLINE)\nnode.literal = literal\nnode\n"}},{"html_id":"image(url:String,title=\"\"):Node-class-method","name":"image","doc":"Makes a node with `NodeType::Image`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Image\">NodeType::Image</a></code>.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"},{"name":"title","default_value":"\"\"","external_name":"title","restriction":""}],"args_string":"(url : String, title = \"\") : Node","args_html":"(url : String, title = <span class=\"s\">&quot;&quot;</span>) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":30,"url":null},"def":{"name":"image","args":[{"name":"url","external_name":"url","restriction":"String"},{"name":"title","default_value":"\"\"","external_name":"title","restriction":""}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_IMAGE)\nnode.url = url\nnode.title = title\nnode\n"}},{"html_id":"item:Node-class-method","name":"item","doc":"Makes a node with `NodeType::Item`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Item\">NodeType::Item</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"item","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_ITEM)"}},{"html_id":"linebreak:Node-class-method","name":"linebreak","doc":"Makes a node with `NodeType::Linebreak`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Linebreak\">NodeType::Linebreak</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"linebreak","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_LINEBREAK)"}},{"html_id":"link(url:String,title=\"\"):Node-class-method","name":"link","doc":"Makes a node with `NodeType::Link`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Link\">NodeType::Link</a></code>.</p>","abstract":false,"args":[{"name":"url","external_name":"url","restriction":"String"},{"name":"title","default_value":"\"\"","external_name":"title","restriction":""}],"args_string":"(url : String, title = \"\") : Node","args_html":"(url : String, title = <span class=\"s\">&quot;&quot;</span>) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":30,"url":null},"def":{"name":"link","args":[{"name":"url","external_name":"url","restriction":"String"},{"name":"title","default_value":"\"\"","external_name":"title","restriction":""}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_LINK)\nnode.url = url\nnode.title = title\nnode\n"}},{"html_id":"list_as_bullet(tight:Bool=true)-class-method","name":"list_as_bullet","doc":"Makes a node with `NodeType::List` with `ListType::Bullet`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#List\">NodeType::List</a></code> with <code><a href=\"../Cmark/ListType.html#Bullet\">ListType::Bullet</a></code>.</p>","abstract":false,"args":[{"name":"tight","default_value":"true","external_name":"tight","restriction":"Bool"}],"args_string":"(tight : Bool = true)","args_html":"(tight : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/cmark/node_maker.cr","line_number":85,"url":null},"def":{"name":"list_as_bullet","args":[{"name":"tight","default_value":"true","external_name":"tight","restriction":"Bool"}],"visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_LIST)\nnode.list_tight = tight\nnode.list_type = ListType::Bullet\nnode\n"}},{"html_id":"list_as_ordered(tight:Bool=true,start=1,delim=DelimType::Period)-class-method","name":"list_as_ordered","doc":"Makes a node with `NodeType::List` with `ListType::Ordered`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#List\">NodeType::List</a></code> with <code><a href=\"../Cmark/ListType.html#Ordered\">ListType::Ordered</a></code>.</p>","abstract":false,"args":[{"name":"tight","default_value":"true","external_name":"tight","restriction":"Bool"},{"name":"start","default_value":"1","external_name":"start","restriction":""},{"name":"delim","default_value":"DelimType::Period","external_name":"delim","restriction":""}],"args_string":"(tight : Bool = true, start = 1, delim = DelimType::Period)","args_html":"(tight : Bool = <span class=\"n\">true</span>, start = <span class=\"n\">1</span>, delim = <span class=\"t\">DelimType</span><span class=\"t\">::</span><span class=\"t\">Period</span>)","location":{"filename":"src/cmark/node_maker.cr","line_number":93,"url":null},"def":{"name":"list_as_ordered","args":[{"name":"tight","default_value":"true","external_name":"tight","restriction":"Bool"},{"name":"start","default_value":"1","external_name":"start","restriction":""},{"name":"delim","default_value":"DelimType::Period","external_name":"delim","restriction":""}],"visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_LIST)\nnode.list_tight = tight\nnode.list_type = ListType::Ordered\nnode.list_start = start\nnode.list_delim = delim\nnode\n"}},{"html_id":"paragraph(parent:Node,append=true):Node-class-method","name":"paragraph","doc":"Makes a node with `NodeType::Paragraph` as child of the given _parent_.\n\nIf _append_ is true the new paragraph will be appended as child of _parent_,\notherwise it will be prepended as child.\n\nIt raises `Cmark::TreeManipulationError` if cannot be inserted as child of _parent_.\n\nNOTE: a paragraph node could theoretically be created without a parent.\nHowever, the HTML renderer of the underlying C library assumes that\na paragraph node will always have a parent.\nGiven that most users will render use such HTML rendering anyways,\nit is better to be safe than to have an invalid memory access.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Paragraph\">NodeType::Paragraph</a></code> as child of the given <em>parent</em>.</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Node"},{"name":"append","default_value":"true","external_name":"append","restriction":""}],"args_string":"(parent : Node, append = true) : Node","args_html":"(parent : <a href=\"../Cmark/Node.html\">Node</a>, append = <span class=\"n\">true</span>) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":68,"url":null},"def":{"name":"paragraph","args":[{"name":"parent","external_name":"parent","restriction":"Node"},{"name":"append","default_value":"true","external_name":"append","restriction":""}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_PARAGRAPH)\nif append\n  parent.append_child(node)\nelse\n  parent.prepend_child(node)\nend\nnode\n"}},{"html_id":"softbreak:Node-class-method","name":"softbreak","doc":"Makes a node with `NodeType::Softbreak`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Softbreak\">NodeType::Softbreak</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"softbreak","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_SOFTBREAK)"}},{"html_id":"strikethrough:Node-class-method","name":"strikethrough","doc":"Makes a node with `NodeType::Strikethrough`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Strikethrough\">NodeType::Strikethrough</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":289,"url":null},"def":{"name":"strikethrough","return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark.cmark_node_strikethrough)\nextension_p = LibCmark.cmark_find_syntax_extension(\"strikethrough\")\nLibCmark.cmark_node_set_syntax_extension(node.node_p, extension_p)\nnode\n"}},{"html_id":"strong:Node-class-method","name":"strong","doc":"Makes a node with `NodeType::Strong`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Strong\">NodeType::Strong</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"strong","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_STRONG)"}},{"html_id":"table(contents:Array(Array(Node))):Node-class-method","name":"table","doc":"Makes a node with `NodeType::Table` using a bidimensional array of `Node` for _contents_,\nwith the first array of nodes being its headers.\n\nNon-header arrays of nodes can be of different size with respect to the the header array of nodes.\nIf the non-header array's size is greater than the header's size, the nodes in excess will be discarded.\nIf, on the contrary, the non-header array's size is less than the header's size, the table row will be padded with empty cells.\n\nIt raises `Cmark::Error` if the headers or _contents_ arrays are empty.\n\nIt raises `Cmark::TreeManipulationError` if any node in _contents_ cannot be appended\nto its respective table cell.\n\n\nThis example\n```\ninclude NodeMaker\ncontents = [] of Array(Node)\ncontents.push [text(\"foo\"), text(\"bar\")]\ncontents.push [text(\"fiz\"), text(\"baz\")]\nnode = table(contents)\nnode.render_html\n```\nrenders the following HTML (formatted for better reading):\n```text\n<table>\n  <thead>\n    <tr>\n      <th>foo</th>\n      <th>bar</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fiz</td>\n       <td>baz</td>\n    </tr>\n  </tbody>\n</table>\n```","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Table\">NodeType::Table</a></code> using a bidimensional array of <code><a href=\"../Cmark/Node.html\">Node</a></code> for <em>contents</em>, with the first array of nodes being its headers.</p>","abstract":false,"args":[{"name":"contents","external_name":"contents","restriction":"Array(Array(Node))"}],"args_string":"(contents : Array(Array(Node))) : Node","args_html":"(contents : Array(Array(<a href=\"../Cmark/Node.html\">Node</a>))) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":160,"url":null},"def":{"name":"table","args":[{"name":"contents","external_name":"contents","restriction":"Array(Array(Node))"}],"return_type":"Node","visibility":"Public","body":"if contents.empty?\n  raise(Cmark::Error.new(\"Table contents cannot be empty\"))\nend\nheaders = contents.first\nif headers.empty?\n  raise(Cmark::Error.new(\"Table headers cannot be empty\"))\nend\nstr = String.build do |str|\n  str << \"|\"\n  headers.size.times do\n    str << \" |\"\n  end\n  str << \"\\n|\"\n  headers.size.times do\n    str << \"-|\"\n  end\n  (contents.size - 1).times do\n    str << \"\\n|\"\n    headers.size.times do\n      str << \" |\"\n    end\n  end\nend\nroot = Cmark.parse_document(str, extensions: Extension::Table)\ntable = root.first_child.not_nil!\nrow = col = 0\n(EventIterator.new(table)).modifiable_node_iterator.each do |table_element|\n  if table_element.type.table_cell?\n    if node = contents[row][col]?\n      table_element.append_child(node)\n      table_element.table_string_content = node.render_commonmark\n    end\n    col = col + 1\n  else\n    if table_element.type.table_row?\n      row = row + 1\n      col = 0\n    end\n  end\nend\nheader_cells = table.first_child.not_nil!.children\ntable.table_string_content = \"| #{(header_cells.map(&.table_string_content)).join(\" | \")} |\"\ntable.unlink\ntable\n"}},{"html_id":"table_row(table:Node,contents:Array(Node),previous_table_row:Node|Nil=nil):Node-class-method","name":"table_row","doc":"Makes a node with `NodeType::Table` using _contents_ to populate its cells; if *previous_table_row*\nis not nil then the new row is inserted after it, otherwise it is appended as a child of _table_.\n\nNOTE: If creating a table from scratch is better to use `.table`.\n\nIf _contents_ size is greater than the number of columns in _table_, the nodes in excess will be discarded.\nIf, on the contrary, _contents_ size is less than number of columns, the table row will be padded with empty cells.\n\nIt raises `Cmark::Error` if  _contents_ is empty, if _table_ is not a node with `NodeType::Table`,\nor if *previous_table_row* is set but is not a child of _table_.\n\nIt raises `Cmark::TreeManipulationError` if any node in _contents_ cannot be appended\nto its respective table cell.\n\nThis example\n```\ninclude NodeMaker\ntable_contents = [] of Array(Node)\ntable_contents.push [text(\"foo\"), text(\"bar\")]\ntable_contents.push [text(\"fee\"), text(\"ber\")]\ntable_node = table(table_contents)\nprevious_table_row = table_node.first_child.not_nil!\ncontents = [text(\"fiz\"), text(\"baz\")]\ntable_row_node = table_row(table, contents, previous_table_row)\ntable_node.render_html\n```\nrenders the following HTML (formatted for better reading):\n```text\n<table>\n  <thead>\n    <tr>\n      <th>foo</th>\n      <th>bar</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fiz</td>\n       <td>baz</td>\n    </tr>\n    <tr>\n      <td>fee</td>\n       <td>ber</td>\n    </tr>\n  </tbody>\n</table>\n```","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Table\">NodeType::Table</a></code> using <em>contents</em> to populate its cells; if <em>previous_table_row</em> is not nil then the new row is inserted after it, otherwise it is appended as a child of <em>table</em>.</p>","abstract":false,"args":[{"name":"table","external_name":"table","restriction":"Node"},{"name":"contents","external_name":"contents","restriction":"Array(Node)"},{"name":"previous_table_row","default_value":"nil","external_name":"previous_table_row","restriction":"Node | ::Nil"}],"args_string":"(table : Node, contents : Array(Node), previous_table_row : Node | Nil = nil) : Node","args_html":"(table : <a href=\"../Cmark/Node.html\">Node</a>, contents : Array(<a href=\"../Cmark/Node.html\">Node</a>), previous_table_row : <a href=\"../Cmark/Node.html\">Node</a> | Nil = <span class=\"n\">nil</span>) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":245,"url":null},"def":{"name":"table_row","args":[{"name":"table","external_name":"table","restriction":"Node"},{"name":"contents","external_name":"contents","restriction":"Array(Node)"},{"name":"previous_table_row","default_value":"nil","external_name":"previous_table_row","restriction":"Node | ::Nil"}],"return_type":"Node","visibility":"Public","body":"if contents.empty?\n  raise(Cmark::Error.new(\"Table row contents cannot be empty\"))\nend\nif table.type.table?\nelse\n  raise(Cmark::Error.new(\"#{table} is not a table\"))\nend\nif !previous_table_row.nil? && (!previous_table_row.parent == table)\n  raise(Cmark::Error.new(\"#{previous_table_row} is not a child of #{table}\"))\nend\nn_columns = table.table_columns\nstr = String.build do |str|\n  str << \"|\"\n  n_columns.times do\n    str << \" |\"\n  end\n  str << \"\\n|\"\n  n_columns.times do\n    str << \"-|\"\n  end\nend\nroot = Cmark.parse_document(str, extensions: Extension::Table)\ndummy_table = root.first_child.not_nil!\ntable_row = dummy_table.first_child.not_nil!\ntable_row.table_row_header = false\n(EventIterator.new(table_row)).modifiable_node_iterator.each_with_index do |table_cell, index|\n  if node = contents[index]?\n    table_cell.append_child(node)\n    table_cell.table_string_content = node.render_commonmark\n  end\nend\nif previous_table_row.nil?\n  table_row.unlink\n  table.append_child(table_row)\nelse\n  after_insertion_rows = [] of Node\n  found = false\n  row_iterator = (EventIterator.new(table)).modifiable_node_iterator.select do |__arg1|\n    __arg1.type.table_row?\n  end\n  row_iterator.each do |row|\n    if found\n      row.unlink\n      after_insertion_rows.push(row)\n    end\n    if row == previous_table_row\n      found = true\n    end\n  end\n  table_row.unlink\n  table.append_child(table_row)\n  after_insertion_rows.each do |row|\n    table.append_child(row)\n  end\nend\ntable_row\n"}},{"html_id":"tasklist_item(checked:Bool=false)-class-method","name":"tasklist_item","doc":"Makes a tasklist extension node with `NodeType::Item`, which is _checked_ or not.\n\nTo check if a given node is a tasklist item use `Node#tasklist_item?`.","summary":"<p>Makes a tasklist extension node with <code><a href=\"../Cmark/NodeType.html#Item\">NodeType::Item</a></code>, which is <em>checked</em> or not.</p>","abstract":false,"args":[{"name":"checked","default_value":"false","external_name":"checked","restriction":"Bool"}],"args_string":"(checked : Bool = false)","args_html":"(checked : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cmark/node_maker.cr","line_number":299,"url":null},"def":{"name":"tasklist_item","args":[{"name":"checked","default_value":"false","external_name":"checked","restriction":"Bool"}],"visibility":"Public","body":"node = NodeMaker.item\nextension_p = LibCmark.cmark_find_syntax_extension(\"tasklist\")\nLibCmark.cmark_node_set_syntax_extension(node.node_p, extension_p)\nnode.tasklist_item_checked = checked\nnode\n"}},{"html_id":"text(literal:String):Node-class-method","name":"text","doc":"Makes a node with `NodeType::Text`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#Text\">NodeType::Text</a></code>.</p>","abstract":false,"args":[{"name":"literal","external_name":"literal","restriction":"String"}],"args_string":"(literal : String) : Node","args_html":"(literal : String) : <a href=\"../Cmark/Node.html\">Node</a>","location":{"filename":"src/cmark/node_maker.cr","line_number":41,"url":null},"def":{"name":"text","args":[{"name":"literal","external_name":"literal","restriction":"String"}],"return_type":"Node","visibility":"Public","body":"node = Node.new(LibCmark::NodeType::CMARK_NODE_TEXT)\nnode.literal = literal\nnode\n"}},{"html_id":"thematic_break:Node-class-method","name":"thematic_break","doc":"Makes a node with `NodeType::ThematicBreak`.","summary":"<p>Makes a node with <code><a href=\"../Cmark/NodeType.html#ThematicBreak\">NodeType::ThematicBreak</a></code>.</p>","abstract":false,"location":{"filename":"src/cmark/node_maker.cr","line_number":22,"url":null},"def":{"name":"thematic_break","return_type":"Node","visibility":"Public","body":"Node.new(LibCmark::NodeType::CMARK_NODE_THEMATIC_BREAK)"}}]},{"html_id":"cmark/Cmark/NodeSetterError","path":"Cmark/NodeSetterError.html","kind":"class","full_name":"Cmark::NodeSetterError","name":"NodeSetterError","abstract":false,"superclass":{"html_id":"cmark/Cmark/Error","kind":"class","full_name":"Cmark::Error","name":"Error"},"ancestors":[{"html_id":"cmark/Cmark/Error","kind":"class","full_name":"Cmark::Error","name":"Error"},{"html_id":"cmark/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/error.cr","line_number":6,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"An error class for exceptions in setting node accessors with incorrect value/node combinations.","summary":"<p>An error class for exceptions in setting node accessors with incorrect value/node combinations.</p>","constructors":[{"html_id":"new(setter:String,value:String,node:Node)-class-method","name":"new","abstract":false,"args":[{"name":"setter","external_name":"setter","restriction":"String"},{"name":"value","external_name":"value","restriction":"String"},{"name":"node","external_name":"node","restriction":"Node"}],"args_string":"(setter : String, value : String, node : Node)","args_html":"(setter : String, value : String, node : <a href=\"../Cmark/Node.html\">Node</a>)","location":{"filename":"src/cmark/error.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"setter","external_name":"setter","restriction":"String"},{"name":"value","external_name":"value","restriction":"String"},{"name":"node","external_name":"node","restriction":"Node"}],"visibility":"Public","body":"_ = allocate\n_.initialize(setter, value, node)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(message:String)-class-method","name":"new","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/cmark/error.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"cmark/Cmark/NodeType","path":"Cmark/NodeType.html","kind":"enum","full_name":"Cmark::NodeType","name":"NodeType","abstract":false,"ancestors":[{"html_id":"cmark/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cmark/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/node_type.cr","line_number":74,"url":null}],"repository_name":"cmark","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0","doc":"Invalid node","summary":"<p>Invalid node</p>"},{"id":"Document","name":"Document","value":"32769","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"BlockQuote","name":"BlockQuote","value":"32770","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"List","name":"List","value":"32771","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"Item","name":"Item","value":"32772","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"CodeBlock","name":"CodeBlock","value":"32773","doc":"Commonmark / Block / Leaf","summary":"<p>Commonmark / Block / Leaf</p>"},{"id":"HTMLBlock","name":"HTMLBlock","value":"32774","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"CustomBlock","name":"CustomBlock","value":"32775","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"Paragraph","name":"Paragraph","value":"32776","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"Heading","name":"Heading","value":"32777","doc":"Commonmark / Block / Container","summary":"<p>Commonmark / Block / Container</p>"},{"id":"ThematicBreak","name":"ThematicBreak","value":"32778","doc":"Commonmark / Block / Leaf","summary":"<p>Commonmark / Block / Leaf</p>"},{"id":"FootnoteDefinition","name":"FootnoteDefinition","value":"32779","doc":"GFM / Block / Container","summary":"<p>GFM / Block / Container</p>"},{"id":"Text","name":"Text","value":"49153","doc":"Commonmark / Inline / Leaf","summary":"<p>Commonmark / Inline / Leaf</p>"},{"id":"Softbreak","name":"Softbreak","value":"49154","doc":"Commonmark / Inline / Leaf","summary":"<p>Commonmark / Inline / Leaf</p>"},{"id":"Linebreak","name":"Linebreak","value":"49155","doc":"Commonmark / Inline / Leaf","summary":"<p>Commonmark / Inline / Leaf</p>"},{"id":"Code","name":"Code","value":"49156","doc":"Commonmark / Inline / Leaf","summary":"<p>Commonmark / Inline / Leaf</p>"},{"id":"HTMLInline","name":"HTMLInline","value":"49157","doc":"Commonmark / Inline / Leaf","summary":"<p>Commonmark / Inline / Leaf</p>"},{"id":"CustomInline","name":"CustomInline","value":"49158","doc":"Commonmark / Inline / Container","summary":"<p>Commonmark / Inline / Container</p>"},{"id":"Emph","name":"Emph","value":"49159","doc":"Commonmark / Inline / Container","summary":"<p>Commonmark / Inline / Container</p>"},{"id":"Strong","name":"Strong","value":"49160","doc":"Commonmark / Inline / Container","summary":"<p>Commonmark / Inline / Container</p>"},{"id":"Link","name":"Link","value":"49161","doc":"Commonmark / Inline / Container","summary":"<p>Commonmark / Inline / Container</p>"},{"id":"Image","name":"Image","value":"49162","doc":"Commonmark / Inline / Container","summary":"<p>Commonmark / Inline / Container</p>"},{"id":"FootnoteReference","name":"FootnoteReference","value":"49163","doc":"GFM / Inline / Container","summary":"<p>GFM / Inline / Container</p>"},{"id":"Table","name":"Table","value":"32785","doc":"GFM / Block / Container","summary":"<p>GFM / Block / Container</p>"},{"id":"TableRow","name":"TableRow","value":"32786","doc":"GFM / Block / Container","summary":"<p>GFM / Block / Container</p>"},{"id":"TableCell","name":"TableCell","value":"32787","doc":"GFM / Block / Container","summary":"<p>GFM / Block / Container</p>"},{"id":"Strikethrough","name":"Strikethrough","value":"49169","doc":"GFM / Inline / Container","summary":"<p>GFM / Inline / Container</p>"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"Represents the type of a node.\n\nIf valid, the type can be grouped into several categories:\n1) block or inline; 2) Commonmark or GFM; and 3) container or leaf.\nUse the respective method to check the node type category:\n  1. `#block?` or `#inline?`\n  2. `#commonmark?` or `#gfm?`\n  3. `#container?` or `#leaf?`\n\nIf the node is _invalid_ it has the type `None`, and all of the previous methods will return false.\n\nCommonmark:\n - Block types:\n    - `Document`\n    - `BlockQuote`\n    - `List`\n    - `Item`\n    - `CodeBlock`\n    - `HTMLBlock`\n    - `CustomBlock`\n    - `Paragraph`\n    - `Heading`\n    - `ThematicBreak`\n- Inline types:\n    - `Text`\n    - `Softbreak`\n    - `Linebreak`\n    - `Code`\n    - `HTMLInline`\n    - `CustomInline`\n    - `Emph`\n    - `Strong`\n    - `Link`\n    - `Image`\n\nGFM:\n\n - Block types:\n    - `Table`\n    - `TableRow`\n    - `TableCell`\n    - `FootnoteDefinition`\n - Inline types:\n    - `Strikethrough`\n    - `FootnoteReference`\n\nLeaf nodes:\n\n - `HTMLBlock`\n - `ThematicBreak`\n - `CodeBlock`\n - `Text`\n - `Softbreak`\n - `Linebreak`\n - `Code`\n - `HTMLInline`\n\nNOTE: The GFM syntax extension for tasklists does not create a new node type. That is, a tasklist item\nhas `NodeType::Item`. To check if a given node is a tasklist item use `Node#tasklist_item?`; to set if a\nlist item node represents a tasklist or not use `Node#tasklist_item=`.\n\nNOTE: Both footnote elements are part of GFM, but they are not syntax extensions and they\nare not defined in the GFM spec.\nTherefore, they can be enabled in so-called *Commonmark-only* methods using `Option::Footnotes`.\nNormal inconsistencies when trying to define a standard specification‽\nFor more information regarding footnotes in cmark-gfm see [this pull request](https://github.com/github/cmark-gfm/pull/64).\nTo check if an element is part of a syntax extension use `#syntax_extension?`.\n\nNOTE: The numeric values of GFM extensions types do not correspond to their counterpart in the C library because\nthese are not predefined constants, they are dynamically registered at runtime.","summary":"<p>Represents the type of a node.</p>","instance_methods":[{"html_id":"block?-instance-method","name":"block?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":75,"url":null},"def":{"name":"block?","visibility":"Public","body":"(self.value & LibCmark::CMARK_NODE_TYPE_MASK) == LibCmark::CMARK_NODE_TYPE_BLOCK"}},{"html_id":"block_quote?-instance-method","name":"block_quote?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":132,"url":null},"def":{"name":"block_quote?","visibility":"Public","body":"self == BlockQuote"}},{"html_id":"code?-instance-method","name":"code?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":159,"url":null},"def":{"name":"code?","visibility":"Public","body":"self == Code"}},{"html_id":"code_block?-instance-method","name":"code_block?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":138,"url":null},"def":{"name":"code_block?","visibility":"Public","body":"self == CodeBlock"}},{"html_id":"commonmark?-instance-method","name":"commonmark?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":92,"url":null},"def":{"name":"commonmark?","visibility":"Public","body":"!none? && !gfm?"}},{"html_id":"container?-instance-method","name":"container?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":100,"url":null},"def":{"name":"container?","visibility":"Public","body":"!none? && !leaf?"}},{"html_id":"custom_block?-instance-method","name":"custom_block?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":142,"url":null},"def":{"name":"custom_block?","visibility":"Public","body":"self == CustomBlock"}},{"html_id":"custom_inline?-instance-method","name":"custom_inline?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":163,"url":null},"def":{"name":"custom_inline?","visibility":"Public","body":"self == CustomInline"}},{"html_id":"document?-instance-method","name":"document?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":130,"url":null},"def":{"name":"document?","visibility":"Public","body":"self == Document"}},{"html_id":"emph?-instance-method","name":"emph?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":165,"url":null},"def":{"name":"emph?","visibility":"Public","body":"self == Emph"}},{"html_id":"footnote_definition?-instance-method","name":"footnote_definition?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":150,"url":null},"def":{"name":"footnote_definition?","visibility":"Public","body":"self == FootnoteDefinition"}},{"html_id":"footnote_reference?-instance-method","name":"footnote_reference?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":173,"url":null},"def":{"name":"footnote_reference?","visibility":"Public","body":"self == FootnoteReference"}},{"html_id":"gfm?-instance-method","name":"gfm?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":88,"url":null},"def":{"name":"gfm?","visibility":"Public","body":"(syntax_extension? || footnote_definition?) || footnote_reference?"}},{"html_id":"heading?-instance-method","name":"heading?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":146,"url":null},"def":{"name":"heading?","visibility":"Public","body":"self == Heading"}},{"html_id":"html_block?-instance-method","name":"html_block?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":140,"url":null},"def":{"name":"html_block?","visibility":"Public","body":"self == HTMLBlock"}},{"html_id":"html_inline?-instance-method","name":"html_inline?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":161,"url":null},"def":{"name":"html_inline?","visibility":"Public","body":"self == HTMLInline"}},{"html_id":"image?-instance-method","name":"image?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":171,"url":null},"def":{"name":"image?","visibility":"Public","body":"self == Image"}},{"html_id":"inline?-instance-method","name":"inline?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":79,"url":null},"def":{"name":"inline?","visibility":"Public","body":"(self.value & LibCmark::CMARK_NODE_TYPE_MASK) == LibCmark::CMARK_NODE_TYPE_INLINE"}},{"html_id":"item?-instance-method","name":"item?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":136,"url":null},"def":{"name":"item?","visibility":"Public","body":"self == Item"}},{"html_id":"leaf?-instance-method","name":"leaf?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":96,"url":null},"def":{"name":"leaf?","visibility":"Public","body":"(((((((text? || softbreak?) || linebreak?) || code?) || html_block?) || code_block?) || html_inline?) || code?) || thematic_break?"}},{"html_id":"linebreak?-instance-method","name":"linebreak?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":157,"url":null},"def":{"name":"linebreak?","visibility":"Public","body":"self == Linebreak"}},{"html_id":"link?-instance-method","name":"link?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":169,"url":null},"def":{"name":"link?","visibility":"Public","body":"self == Link"}},{"html_id":"list?-instance-method","name":"list?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":134,"url":null},"def":{"name":"list?","visibility":"Public","body":"self == List"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":125,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"paragraph?-instance-method","name":"paragraph?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":144,"url":null},"def":{"name":"paragraph?","visibility":"Public","body":"self == Paragraph"}},{"html_id":"softbreak?-instance-method","name":"softbreak?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":155,"url":null},"def":{"name":"softbreak?","visibility":"Public","body":"self == Softbreak"}},{"html_id":"strikethrough?-instance-method","name":"strikethrough?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":185,"url":null},"def":{"name":"strikethrough?","visibility":"Public","body":"self == Strikethrough"}},{"html_id":"strong?-instance-method","name":"strong?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":167,"url":null},"def":{"name":"strong?","visibility":"Public","body":"self == Strong"}},{"html_id":"syntax_extension?-instance-method","name":"syntax_extension?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":83,"url":null},"def":{"name":"syntax_extension?","visibility":"Public","body":"(self.value & 16) == 16"}},{"html_id":"table?-instance-method","name":"table?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":178,"url":null},"def":{"name":"table?","visibility":"Public","body":"self == Table"}},{"html_id":"table_cell?-instance-method","name":"table_cell?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":182,"url":null},"def":{"name":"table_cell?","visibility":"Public","body":"self == TableCell"}},{"html_id":"table_row?-instance-method","name":"table_row?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":180,"url":null},"def":{"name":"table_row?","visibility":"Public","body":"self == TableRow"}},{"html_id":"text?-instance-method","name":"text?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":153,"url":null},"def":{"name":"text?","visibility":"Public","body":"self == Text"}},{"html_id":"thematic_break?-instance-method","name":"thematic_break?","abstract":false,"location":{"filename":"src/cmark/node_type.cr","line_number":148,"url":null},"def":{"name":"thematic_break?","visibility":"Public","body":"self == ThematicBreak"}}]},{"html_id":"cmark/Cmark/Option","path":"Cmark/Option.html","kind":"enum","full_name":"Cmark::Option","name":"Option","abstract":false,"ancestors":[{"html_id":"cmark/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cmark/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cmark/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/option.cr","line_number":27,"url":null}],"repository_name":"cmark","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Sourcepos","name":"Sourcepos","value":"2","doc":"Include a 'data-sourcepos' attribute on all block elements.","summary":"<p>Include a 'data-sourcepos' attribute on all block elements.</p>"},{"id":"Hardbreaks","name":"Hardbreaks","value":"4","doc":"Render 'softbreak' elements as hard line breaks.","summary":"<p>Render 'softbreak' elements as hard line breaks.</p>"},{"id":"Unsafe","name":"Unsafe","value":"131072","doc":"Render raw HTML and unsafe links.\n\nIt applies to 'javascript', 'vbscript', 'file', and 'data',\nexcept for 'image/png', 'image/gif', 'image/jpeg', or\n'image/webp' mime types.\n\nBy default, raw HTML is replaced by a placeholder HTML comment.\nUnsafe links are replaced by empty strings.","summary":"<p>Render raw HTML and unsafe links.</p>"},{"id":"Nobreaks","name":"Nobreaks","value":"16","doc":"Render 'softbreak' elements as spaces.","summary":"<p>Render 'softbreak' elements as spaces.</p>"},{"id":"ValidateUTF8","name":"ValidateUTF8","value":"512","doc":"Validate UTF-8 in the input before parsing, replacing illegal\nsequences with the replacement character U+FFFD.","summary":"<p>Validate UTF-8 in the input before parsing, replacing illegal sequences with the replacement character U+FFFD.</p>"},{"id":"Smart","name":"Smart","value":"1024","doc":"Convert straight quotes to curly, --- to em dashes, -- to en dashes.","summary":"<p>Convert straight quotes to curly, --- to em dashes, -- to en dashes.</p>"},{"id":"GithubPreLang","name":"GithubPreLang","value":"2048","doc":"Use GitHub-style '<pre lang=\"x\">' tags for code blocks instead\nof '<pre><code class=\"language-x\">'.","summary":"<p>Use GitHub-style '<pre lang=\"x\">' tags for code blocks instead of '<pre><code class=\"language-x\">'.</p>"},{"id":"LiberalHTMLTag","name":"LiberalHTMLTag","value":"4096","doc":"Be liberal in interpreting inline HTML tags.","summary":"<p>Be liberal in interpreting inline HTML tags.</p>"},{"id":"Footnotes","name":"Footnotes","value":"8192","doc":"Parse footnotes.","summary":"<p>Parse footnotes.</p>"},{"id":"StrikethroughDoubleTilde","name":"StrikethroughDoubleTilde","value":"16384","doc":"Only parse strikethroughs if surrounded by exactly 2 tildes.","summary":"<p>Only parse strikethroughs if surrounded by exactly 2 tildes.</p>"},{"id":"TablePreferStyleAttributes","name":"TablePreferStyleAttributes","value":"32768","doc":"Use style attributes to align table cells instead of align attributes.","summary":"<p>Use style attributes to align table cells instead of align attributes.</p>"},{"id":"FullInfoString","name":"FullInfoString","value":"65536","doc":"Include the remainder of the info string in code blocks in a separate attribute.","summary":"<p>Include the remainder of the info string in code blocks in a separate attribute.</p>"},{"id":"None","name":"None","value":"0"},{"id":"All","name":"All","value":"261654"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"A flag enum for rendering and parsing options, with `None` being the default.\n\nOptions affecting rendering:\n* `Sourcepos`\n* `Hardbreaks`\n* `Unsafe`\n* `Nobreaks`\n\nOptions affecting parsing:\n* `ValidateUTF8`\n* `Smart`\n* `GithubPreLang`\n* `LiberalHTMLTag`\n* `Footnotes`\n* `StrikethroughDoubleTilde`\n* `TablePreferStyleAttributes`\n* `FullInfoString`\n\nYou can easily combine options like this:\n```\noptions = Option.flags(Unsafe, Nobreaks, ValidateUTF8, Smart)\n```","summary":"<p>A flag enum for rendering and parsing options, with <code><a href=\"../Cmark/Option.html#None\">None</a></code> being the default.</p>","instance_methods":[{"html_id":"footnotes?-instance-method","name":"footnotes?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":66,"url":null},"def":{"name":"footnotes?","visibility":"Public","body":"self.includes?(Footnotes)"}},{"html_id":"full_info_string?-instance-method","name":"full_info_string?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":75,"url":null},"def":{"name":"full_info_string?","visibility":"Public","body":"self.includes?(FullInfoString)"}},{"html_id":"github_pre_lang?-instance-method","name":"github_pre_lang?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":60,"url":null},"def":{"name":"github_pre_lang?","visibility":"Public","body":"self.includes?(GithubPreLang)"}},{"html_id":"hardbreaks?-instance-method","name":"hardbreaks?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":34,"url":null},"def":{"name":"hardbreaks?","visibility":"Public","body":"self.includes?(Hardbreaks)"}},{"html_id":"liberal_html_tag?-instance-method","name":"liberal_html_tag?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":63,"url":null},"def":{"name":"liberal_html_tag?","visibility":"Public","body":"self.includes?(LiberalHTMLTag)"}},{"html_id":"nobreaks?-instance-method","name":"nobreaks?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":47,"url":null},"def":{"name":"nobreaks?","visibility":"Public","body":"self.includes?(Nobreaks)"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":27,"url":null},"def":{"name":"none?","visibility":"Public","body":"value == 0"}},{"html_id":"smart?-instance-method","name":"smart?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":56,"url":null},"def":{"name":"smart?","visibility":"Public","body":"self.includes?(Smart)"}},{"html_id":"sourcepos?-instance-method","name":"sourcepos?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":31,"url":null},"def":{"name":"sourcepos?","visibility":"Public","body":"self.includes?(Sourcepos)"}},{"html_id":"strikethrough_double_tilde?-instance-method","name":"strikethrough_double_tilde?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":69,"url":null},"def":{"name":"strikethrough_double_tilde?","visibility":"Public","body":"self.includes?(StrikethroughDoubleTilde)"}},{"html_id":"table_prefer_style_attributes?-instance-method","name":"table_prefer_style_attributes?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":72,"url":null},"def":{"name":"table_prefer_style_attributes?","visibility":"Public","body":"self.includes?(TablePreferStyleAttributes)"}},{"html_id":"unsafe?-instance-method","name":"unsafe?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":44,"url":null},"def":{"name":"unsafe?","visibility":"Public","body":"self.includes?(Unsafe)"}},{"html_id":"validate_utf8?-instance-method","name":"validate_utf8?","abstract":false,"location":{"filename":"src/cmark/option.cr","line_number":53,"url":null},"def":{"name":"validate_utf8?","visibility":"Public","body":"self.includes?(ValidateUTF8)"}}]},{"html_id":"cmark/Cmark/Renderer","path":"Cmark/Renderer.html","kind":"class","full_name":"Cmark::Renderer","name":"Renderer","abstract":true,"superclass":{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/renderer.cr","line_number":3,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"cmark/Cmark/HTMLRenderer","kind":"class","full_name":"Cmark::HTMLRenderer","name":"HTMLRenderer"}],"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"The base renderer class from which to inherit for full custom node rendering.","summary":"<p>The base renderer class from which to inherit for full custom node rendering.</p>","constructors":[{"html_id":"new(options:Cmark::Option=Option::None,extensions:Cmark::Extension=Extension::None)-class-method","name":"new","abstract":false,"args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":"::Cmark::Option"},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":"::Cmark::Extension"}],"args_string":"(options : Cmark::Option = Option::None, extensions : Cmark::Extension = Extension::None)","args_html":"(options : <a href=\"../Cmark/Option.html\">Cmark::Option</a> = <span class=\"t\">Option</span><span class=\"t\">::</span><span class=\"t\">None</span>, extensions : <a href=\"../Cmark/Extension.html\">Cmark::Extension</a> = <span class=\"t\">Extension</span><span class=\"t\">::</span><span class=\"t\">None</span>)","location":{"filename":"src/cmark/renderer.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"options","default_value":"Option::None","external_name":"options","restriction":"::Cmark::Option"},{"name":"extensions","default_value":"Extension::None","external_name":"extensions","restriction":"::Cmark::Extension"}],"visibility":"Public","body":"_ = allocate\n_.initialize(options, extensions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"cr-instance-method","name":"cr","doc":"Prints a '\\n' in output if its last character in output is not already '\\n'","summary":"<p>Prints a '\\n' in output if its last character in output is not already '\\n'</p>","abstract":false,"location":{"filename":"src/cmark/renderer.cr","line_number":34,"url":null},"def":{"name":"cr","visibility":"Public","body":"if @output.bytesize > 0 && (@output.buffer[@output.bytesize - 1] != 10)\n  @output.write_byte(10)\nend"}},{"html_id":"escape_html(content:String)-instance-method","name":"escape_html","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String)","args_html":"(content : String)","location":{"filename":"src/cmark/renderer.cr","line_number":29,"url":null},"def":{"name":"escape_html","args":[{"name":"content","external_name":"content","restriction":"String"}],"visibility":"Public","body":"has_escape_html_char?(content) ? content.gsub(ESCAPES) : content"}},{"html_id":"filter_tags(content:String)-instance-method","name":"filter_tags","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String)","args_html":"(content : String)","location":{"filename":"src/cmark/renderer.cr","line_number":55,"url":null},"def":{"name":"filter_tags","args":[{"name":"content","external_name":"content","restriction":"String"}],"visibility":"Public","body":"content.gsub(TAGFILTER_REGEX, \"&lt;\\\\1\")"}},{"html_id":"out(str)-instance-method","name":"out","doc":"Prints to output","summary":"<p>Prints to output</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":""}],"args_string":"(str)","args_html":"(str)","location":{"filename":"src/cmark/renderer.cr","line_number":25,"url":null},"def":{"name":"out","args":[{"name":"str","external_name":"str","restriction":""}],"visibility":"Public","body":"@output << str"}},{"html_id":"render(root:Node):String-instance-method","name":"render","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"Node"}],"args_string":"(root : Node) : String","args_html":"(root : <a href=\"../Cmark/Node.html\">Node</a>) : String","location":{"filename":"src/cmark/renderer.cr","line_number":59,"url":null},"def":{"name":"render","args":[{"name":"root","external_name":"root","restriction":"Node"}],"return_type":"String","visibility":"Public","body":"if @output.bytesize > 0\n  @output = String::Builder.new\nend\niterator = EventIterator.new(root)\niterator.each do |event|\n  node = event.node\n  entering = event.enter?\n  case node.type\n  when NodeType::Document\n    document(node, entering)\n  when NodeType::BlockQuote\n    block_quote(node, entering)\n  when NodeType::List\n    list(node, entering)\n  when NodeType::Item\n    item(node, entering)\n  when NodeType::CodeBlock\n    code_block(node)\n  when NodeType::HTMLBlock\n    html_block(node)\n  when NodeType::CustomBlock\n    custom_block(node, entering)\n  when NodeType::Paragraph\n    paragraph(node, entering)\n  when NodeType::Heading\n    heading(node, entering)\n  when NodeType::ThematicBreak\n    thematic_break(node)\n  when NodeType::FootnoteDefinition\n    footnote_definition(node, entering)\n  when NodeType::Text\n    text(node)\n  when NodeType::Softbreak\n    softbreak(node)\n  when NodeType::Linebreak\n    linebreak(node)\n  when NodeType::Code\n    code(node)\n  when NodeType::HTMLInline\n    html_inline(node)\n  when NodeType::CustomInline\n    custom_inline(node, entering)\n  when NodeType::Emph\n    emph(node, entering)\n  when NodeType::Strong\n    strong(node, entering)\n  when NodeType::Link\n    link(node, entering)\n  when NodeType::Image\n    image(node, entering)\n  when NodeType::FootnoteReference\n    footnote_inline(node, entering)\n  when NodeType::Table\n    table(node, entering)\n  when NodeType::TableRow\n    table_row(node, entering)\n  when NodeType::TableCell\n    table_cell(node, entering)\n  when NodeType::Strikethrough\n    strikethrough(node, entering)\n  else\n    raise(Cmark::Error.new(\"Invalid rendering for #{node}.\"))\n  end\nend\nif @output.bytesize == 0\n  \"\"\nelse\n  @output.to_s\nend\n"}}]},{"html_id":"cmark/Cmark/TreeManipulationError","path":"Cmark/TreeManipulationError.html","kind":"class","full_name":"Cmark::TreeManipulationError","name":"TreeManipulationError","abstract":false,"superclass":{"html_id":"cmark/Cmark/Error","kind":"class","full_name":"Cmark::Error","name":"Error"},"ancestors":[{"html_id":"cmark/Cmark/Error","kind":"class","full_name":"Cmark::Error","name":"Error"},{"html_id":"cmark/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cmark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cmark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cmark/error.cr","line_number":19,"url":null}],"repository_name":"cmark","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cmark/Cmark","kind":"module","full_name":"Cmark","name":"Cmark"},"doc":"An error class for exceptions raised while manipulating a document AST.","summary":"<p>An error class for exceptions raised while manipulating a document AST.</p>"}]}]}}